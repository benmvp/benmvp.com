{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/quick-trick-jest-asynchronous-tests/","result":{"data":{"post":{"html":"<p>Two weeks ago I wrote a post on <a href=\"/blog/asynchronous-testing-with-enzyme-react-jest/\">Asynchronous testing with Enzyme &#x26; React in Jest</a>. It covered the challenge of testing an async React component when we need to wait until all of the promises have resolved before we can assert on the updated UI. I want to talk about async testing in Jest again, but this time not specifically dealing with UI testing.</p>\n<p>Recently I was writing unit tests for an API wrapper and I wanted to test an error case:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns a rejected promise when the count is 1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Invalid request'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There are <a href=\"https://jestjs.io/docs/en/asynchronous\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">several ways to test asynchronous code in Jest</a> and the above follows the example given for using <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>. I’m trying to assert that when <code class=\"language-text\">getItems(1)</code> is called that the rejected promise returns an object with a <code class=\"language-text\">message</code> of <code class=\"language-text\">&#39;Invalid request&#39;</code>. It turned out that my <code class=\"language-text\">getItems</code> code had a bug. It wasn’t returning a rejected promise, but a resolved promise in this case. But even though the test never executed the assertion within the <code class=\"language-text\">catch</code> handler, <strong>the test still passed</strong>.</p>\n<p>Similarly here’s another test that passed when it shouldn’t have:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns items when the count is greater than 1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// bad test! the promise should be returned in the test</span>\n  <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this case, based on the Jest’s async testing guide, I wrote the test incorrectly. I needed to <strong>return the promise from <code class=\"language-text\">getItems(5)</code></strong> so that Jest could know this was an async test and wait until the promise had finished resolving. How it’s written now, however, the test calls <code class=\"language-text\">getItems(5)</code> and ends before the async handling of the <code class=\"language-text\">.then()</code>. It calls <code class=\"language-text\">getItems()</code> and quits before receiving the response.</p>\n<p>But still, in this case, the test passed. Another false positive.</p>\n<p>The reason the tests passed even though the code or test were written incorrectly is because in both cases no assertions were run. The <code class=\"language-text\">expect()</code> assertion in the <code class=\"language-text\">catch</code> didn’t run in the first example and the assertion within the <code class=\"language-text\">.then()</code> didn’t run in the second. It turns out by default that <strong>Jest will pass a test if no assertions run</strong>. 🤦🏾‍♂️</p>\n<p>A way to avoid these false positives is by calling <a href=\"https://jestjs.io/docs/en/expect#expecthasassertions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">expect.hasAssertions()</code></a> at the beginning of a test:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns a rejected promise when the count is 1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  expect<span class=\"token punctuation\">.</span><span class=\"token function\">hasAssertions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Invalid request'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Test will fail if `getItems()` didn't return a rejected promise</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns items when the count is greater than 1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  expect<span class=\"token punctuation\">.</span><span class=\"token function\">hasAssertions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// test will fail because we didn't properly return the promise</span>\n  <span class=\"token comment\">// from `getItems()`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now in both cases, the tests will fail because the expected assertions never ran. Even if we fix the code/tests, we’ll still want to keep the <code class=\"language-text\">expect.hasAssertions()</code> check because it’s a great safeguard for asynchronous testing.</p>\n<p>However, it’ll be annoying to have to add <code class=\"language-text\">expect.hasAssertions()</code> to every single test in every single test file. So what we can do is update the <a href=\"https://jestjs.io/docs/en/configuration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest config file</a> and specify the <a href=\"https://jestjs.io/docs/en/configuration#setupfilesafterenv-array\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setupFilesAfterEnv</code></a> option. The file(s) we list for <code class=\"language-text\">setupFilesAfterEnv</code> can configure or set up the testing framework before each test file in the suite is executed. So we can add a file that ensures there’s at least one assertion run for every test case:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// jest.setup.js</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ensure there's at least one assertion run for every test case</span>\n  expect<span class=\"token punctuation\">.</span><span class=\"token function\">hasAssertions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// other setup stuff</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In my opinion, this is how Jest should run by default, but I’m sure there’s some legacy reason why it works the way that it does.</p>\n<p>FYI - If you decide to add this to an existing codebase with tests, be prepared to have a lot of tests to fix! 😄 Every time that I’ve added this to an existing test suite, it’s uncovered more than a handful of asynchronous tests that <em>were</em> passing but were never truly running. And once the were being run after the fix, the tests were actually broken (or maybe even the code was 😨).</p>\n<p>Keep learning my friends. 🤓</p>","excerpt":"Two weeks ago I wrote a post on Asynchronous testing with Enzyme & React in Jest. It covered the challenge of testing an async React…","timeToRead":3,"wordCount":{"words":527},"fields":{"slug":"/quick-trick-jest-asynchronous-tests/"},"frontmatter":{"title":"A quick trick for Jest asynchronous tests","shortDescription":"A small configuration you can add to Jest to reduce false positives for async tests","tags":["async","await","promises"],"category":"Testing","date":"July 29, 2020","dateIso":"2020-07-29"}},"categoryPosts":{"edges":[{"node":{"id":"774a4f93-02fe-5e82-9e88-8a110c79de67","frontmatter":{"title":"Mocking window.location methods in Jest & jsdom","shortDescription":"A way to successfully mock the locked Location object from jsdom in Jest","tags":["mock","react"],"date":"August 6, 2020","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='199'%20viewBox='0%200%20400%20199'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20100v99h401V99c0-55-1-70-1-34v65l-12-1-13-1-15-2-30-3-47-5a439%20439%200%2001-75-11l-1-3c-1%200-1-6%201-17v-6a1694%201694%200%2001-2-52l-1-29h-4c-4%200-4%200-4%204l-1%204-1-4-1-4-1%203c0%207-1%2011-3%2011-2%201-3-1-3-4%200-2%200-2-1-1v17c1%203%203%202%202%200l2-4c2-2%202-2%203%200v12l3%203c2-1%202%201%203%2015%200%2014-1%2016-3%2011l-10-15-7-6-7-7V0h-56l1%204c0%205%200%205-3%205-2%200-3-1-2-3l2-5c1-1-2-1-18-1H77l-1%204a287%20287%200%2001-4%2014V0h-3l-4%203c-1%201-1%201-1-1l-2-2-1%201v3l-1-2c0-1-1-2-5-2l-6%201h-1c-1-1-1%200-1%202v4l2-2c2-2%204-3%204%200l-2%207c0%205%200%205%201%204%204-3%204%204%201%207s-4%202-2-1c1-2%201-3-1-5l-5-2c-2%200-2-1-1-4%201-2%201-2-1-2V8c2-1%203-2%203-5%200-4-2-4-3%200%200%202%200%203-1%202s-1-1-1%201h-1l-2-1%201%202c1%201%201%201-2%201l-5%201-3%201%203%203c1%201%202%202%201%204l-1-1h-1c-1%201%201%205%202%205%202%200%203-6%202-8l1-2h2a167%20167%200%20011%203c2%200%206%205%207%2010l2%204%202-1v1l1%203c2%201%200%204-2%204v1c0%202%200%202-1%201-2%200-3%202-1%204l1%201c0%202-5%202-7%201-2-2-2-6%201-5l3-4c1-5%201-6-2-6l-1-1%202-2v-2l-2-2-2-3c-2-2-2-2-2%202-1%206-2%206-4%204-2-1-4-1-4%202%200%202-2%205-4%205s-3-2-1-4v-5l1-2%201%202c1%204%202%202%202-4%200-5-1-5-3-5-1%201-2%200-2-1l2-2c2%200%203-2%203-4s-3-1-4%201c0%203-2%202-1-1l1-2c2%200%203-3%202-4l-2%201h-4L11%200H0v100M61%205l-2%208-1%2015-1%204%201%202%202-3c0-2%201-3%202-3%202%200%203-3%202-11%200-2%200-3%201-2l1-4c0-5-3-8-5-6m41%2026l-4%203c-6%202-10%205-13%2010l-6%206c-8%2010-12%2038-6%2056%204%2015%2018%2033%2031%2041%2011%207%2031%2012%2031%208l-5-1-6-1-6-2c-4-1-9-5-9-8%200-6-1-7-4-9-2-2-2-3-1-3h2l2-7%202-7v-1l-1-1-14%207h-2v-3l4-3%204-2%202%201-1-2c-1%200-1-1%201-2%202-2%203-1%201%201h2c2-1%203-3%201-3l-2-1c-1-2-9-3-15-1-6%201-5-1%200-3%2015-4%2015-6%203-10-9-4-8-4-8%201v4-11l1-3v2l1%203c3-1%208%200%208%201l5%202%207%201c3%200%202-1-1-3-2%200-3-1-3-2%201%200-2-4-6-7l-7-7h2c3%203%2018%208%2017%206a585%20585%200%2000-3-10c1%202%201%202%202%201h1v1c-1%201-1%202%201%204l4%202-2-3-2-2h2l-1-3c-1-2-1-2%201-6l1-8c-2%200-1-4%201-5l2-2v-2l-1-1-1%201c0%203-3%205-4%202%200-1-1-2-3-1-2%200-3%200-4-2-3-3-3-4-8-1-4%201-5%203-3%203l1%201%202%202c1%201%201%203-2%203L82%2066c-1%201-1%201-1-1l4-5c2-3%202-3%201-5s1-6%203-5l1-1c-1-2%206-8%2015-13l7-5c0-2-7-1-10%200m30%2020c0%205%203%209%2010%2012s9%205%205%204c-1%200-2%200-3%202l-2%207c-2%205-2%206-1%207h1l6-3c10-4%2012-6%206-12l-2-3-2-1c-2%201-7-3-5-4%203-2%200-5-4-6l-4-1h-2l-1-1c1-1%200-2-1-2l-1%201m60%2016l2%206c5%2012%206%2027%203%2041l-2%2010-1%202-3%205-6%208c-3%204-3%206%200%203%204-3%2011-15%2013-20%206-17%205-35-2-50-3-6-4-7-4-5m-38%2014l-3%201-4%202c-4%203-5%203-6%202-1-2-2-2-4%200l-1%203%201%205%201%207c1%200%204-6%204-9l1-2h3l8%201c9%200%209%200%208-4%200-2-1-2-4-2l-3%201%202-2c3-1%203-1%202-4s-2-3-5%201m1%2014c-4%201-7%203-7%204s12%206%2015%206c2%200%203-4%201-6v-1l-1-5-8%202m-12%205l-2%202v5c0%201%202%200%201-1%200-1%201-2%203-1l3%202c-1%201-1%202%207%208%206%206%208%207%208%205v-1c1%202%203%200%202-2%200-2%200-2-1%200-1%201-1%200-1-2l1-5c0-2%200-3-4-3-3%200-4%200-3-1s0-1-3-2l-9-1%201-1%201-1c0-2-1-2-4-1m0%2015c-1%200%205%2013%208%2017v1l-5-6-3-5c-3-4-5-5-3-1%203%205%204%209%203%2012l-2%204-1%205v8h1l1-1%205-1c7-3%207-4%205-6l-2-2%203-3%205-4%203-2%201-2-2-8-8-3c-4-2-8-4-9-3m-19%2018l-1%205%202%201c2%201%202%201-1%201-5%200-6%201-4%205v3c-1%202%201%203%208%203s7%200%204-7l-3-4c-1%201-1%201-1-1%201-1-2-10-3-10l-1%204'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2,"src":"/static/ca02afae964ec416d64f0da2fec8aa8b/dee3b/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg","srcSet":"/static/ca02afae964ec416d64f0da2fec8aa8b/f81b6/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 138w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/cf463/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 275w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/dee3b/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 550w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/c1303/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 825w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/42364/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 1100w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/947df/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 5472w","srcWebp":"/static/ca02afae964ec416d64f0da2fec8aa8b/25338/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp","srcSetWebp":"/static/ca02afae964ec416d64f0da2fec8aa8b/c6300/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 138w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/88818/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 275w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/25338/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 550w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/6d9da/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 825w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/5c86c/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 1100w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/f8fd9/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 5472w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Compass on a window sill"},"fields":{"slug":"/mocking-window-location-methods-jest-jsdom/"},"excerpt":"Well it looks like I’m going to continue my streak about sharing helpful tips around JavaScript testing in Jest. Previously I shared about…"}},{"node":{"id":"12d0b073-ec00-5196-b1e4-a479e5a0f4db","frontmatter":{"title":"Asynchronous testing with Enzyme & React in Jest","shortDescription":"How to use Enzyme to test UI updates after asynchronous events in React components","tags":["react","async","enzyme","react-testing-library"],"date":"July 15, 2020","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='183'%20viewBox='0%200%20400%20183'%20preserveAspectRatio='none'%3e%3cpath%20d='M104%202c-5%203-5-1-4%2066a2010%202010%200%2001-3-57l-1%2064%201%2063%202%203c3%204%203%205%203%2010-1%205-1%206%202%208%202%202%203%206%202%209v2l1-1%202-2v-4l-1-2h23c1%201-8%2011-10%2011-1%200-3%203-3%205s1%202%202-1c3-3%204-4%204-1%200%202%201%201%202-2%200-3%202-5%204-4l2-1c0-5%202-7%208-7h5l1%205c1%208%202%207%202-1%200-3%201-4%204-4s4%200%201%203c-1%203-2%2014-1%2017%200%202%205%202%20100%202a1132%201132%200%2000126-1l11%201h11V0h-24c-22%200-25%200-25%202l-1%201-1-1c0-2-1-2-4-2s-3%200-2%201c2%202%202%203%202%205v4c1%200-3%203-5%203l-4%202-9%203a490%20490%200%2001-70%2019c-8%200-8%200-9-10-2-11-5-13-20-15l-11-1V7c0-3-3-4-4-1%200%202-1%202-2%201s-1-1-1%201c0%203%202%203-28-1-18-1-25-3-27-4h-4c-1%202-17%200-19-2h-2c0%201-3%202-3%200%200-1-20-1-23%201m178%203l-7%206-3%203-1%206c-3%206-3%2013-1%2013%206%200%2010-3%2035-27l7-6h-25l-5%205m64%2026h-6l-38%209a156%20156%200%2000-36%2013c-3%201-3%201-3%204%201%204%200%206-4%207l-4%202-1%203c-1%201%200%206%201%2013v3h6c4%200%205-1%205-2l3-1c3%200%203%200%202%201-2%201-2%201%202%201%203%200%203-1%203-2v-2l4%201%207%202%205%201%201-1-2-8v-6l3-3c5-3%206-2%202%202-3%203-3%204-2%209%200%206%202%208%205%206%203-3%204-2%201%200-2%202-2%204-2%206%201%204%201%204-2%205-2%200-2%201-1%204%200%205%201%205%203%202l4-2c2%200%202%201-2%204l-4%203%201%205%201%2010%201%205%204-4c4-2%205-3%206-2l-3%205-4%203%201%206c1%207%201%207%205%205%203-1%204-1%202%202-2%201-2%204-3%208l-2%208c-1%201%200%2015%202%2018%201%202%2047-8%2056-13%203-1%204-2%203-4l1-2%201%202c0%202%201%202%202%202%202-1%202-7%201-12-1-2-1-3%202-4%202%200%204-1%204-3l-5-31a13818%2013818%200%2001-15-72c0%202-2%203-4%203s-4-4-4-8c0-2-2-3-3-1m-19%208l-3%203%201%207%203%2014c2%2010%204%2011%204%201v-7l-1-1c-2%200-3-1-3-5l-1-6c-1-1%200-3%202-5%205-5%203-6-2-1M147%2065l-1%203-1%202-1%201c-1%203-4%203-8%202s-7%201-6%204l-3%201c-3%200-4%200-6%202l-2%202-2-2-2-3v15l4%205c2%202%202%204%202%2011l2%2010%2013%201%2012%201v-4l-1-5v-2l-1-2c-1%201-2%200-2-1l1-1-1-2h-2l-2%201%201-2v-2l-4-3-2-2%202-4c2-5%203-5%208%203%204%205%204%206%205%204%202-3%202-5%200-5s-2%200%200-1l3-1-3-1-2-1-2-2c-3-1-3-1-2-2l1-5%202-6v-2l1-1c1-1%202-6%200-7l-1%201m191%2031c-4%203-4%203%200%2023%203%2014%203%2014%205%2012l1-7v-9c3-3%202-5-1-4l-3%201c-1-1%202-6%203-5l1-1-1-2c-4%201-6-2-3-6%205-4%203-6-2-2m-21%2015c-3%203-4%204-4%206a11161%2011161%200%20017%2030l1-6a253%20253%200%2001-2-11l-2-7-1-6%204-4c6-5%204-7-3-2m-84%2050l-4%203h-11a1757%201757%200%2001-34%200c0%202%205%204%207%204%201-1%202%200%202%201l3%202a277%20277%200%200139%206l5%201-1-9c-1-12-1-12-6-8'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.1904761904761907,"src":"/static/e36a2f4ea19f9b1b3a1c89adec393208/dee3b/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg","srcSet":"/static/e36a2f4ea19f9b1b3a1c89adec393208/f81b6/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 138w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/cf463/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 275w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/dee3b/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 550w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/c1303/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 825w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/42364/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 1100w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/6a059/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.jpg 6000w","srcWebp":"/static/e36a2f4ea19f9b1b3a1c89adec393208/25338/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp","srcSetWebp":"/static/e36a2f4ea19f9b1b3a1c89adec393208/c6300/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 138w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/88818/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 275w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/25338/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 550w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/6d9da/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 825w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/5c86c/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 1100w,\n/static/e36a2f4ea19f9b1b3a1c89adec393208/3041e/wait-sign-kai-pilger-1k3vsv7iIIc-unsplash.webp 6000w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Wait crosswalk sign in New York City"},"fields":{"slug":"/asynchronous-testing-with-enzyme-react-jest/"},"excerpt":"Back in April I wrote a blog post about how I would choose React Testing Library over Enzyme. It’s probably been my most popular post in the…"}}]},"site":{"siteMetadata":{"author":{"name":"Ben Ilegbodu"}}}},"pageContext":{"slug":"/quick-trick-jest-asynchronous-tests/","previousSlug":"/putting-test-files-pages-folder-nextjs-app/","nextSlug":"/quick-way-sort-javascript-array-multiple-fields/","category":"Testing"}},"staticQueryHashes":["2495720375","307212292","4260024542","520305385","58428228"]}