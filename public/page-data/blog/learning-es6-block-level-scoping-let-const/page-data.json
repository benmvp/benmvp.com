{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/learning-es6-block-level-scoping-let-const/","result":{"data":{"post":{"html":"<p>Coming off the heels of discussing <a href=\"/blog/learning-es6-arrow-functions/\">arrow functions</a>, let’s continue the <a href=\"/learning-es6-series/\"><em>Learning ES6</em></a> series talking about block-level scoping in ECMAScript 6.</p>\n<h2 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p><code class=\"language-text\">let</code> is the new <code class=\"language-text\">var</code>. ES6 provides two new ways for declaring variables: <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>. These pretty much replace the ES3 or ES5 way of declaring variables using <code class=\"language-text\">var</code>. By using block-level scoping, these two keywords help developers avoid common mistakes they make not because they write bad code, but because they don’t fully understand the idiosyncrasies of how JavaScript handles variables.</p>\n<p>Let’s take a look at an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">simpleExample</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> constValue <span class=\"token operator\">=</span> value\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> varValue <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> value\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside block'</span><span class=\"token punctuation\">,</span> varValue<span class=\"token punctuation\">,</span> letValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outside block'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// varValue is available even though it was defined</span>\n  <span class=\"token comment\">// in if-block because it was \"hoisted\" to function scope</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>varValue<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// letValue is a ReferenceError because it</span>\n    <span class=\"token comment\">// was defined w/in if-block</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// e is a ReferenceError</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'letValue not accessible'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// SyntaxError to try and update a variable</span>\n  <span class=\"token comment\">// declared via const</span>\n  <span class=\"token comment\">//constValue += 1;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">simpleExample</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Variables declared via <code class=\"language-text\">let</code> are not available outside of the block in which they are declared. Variables declared via <code class=\"language-text\">const</code> also cannot be updated. You can find more examples in the <a href=\"https://learning-es6.benmvp.com/#block-scoping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">block-level scoping code examples</a> for the <a href=\"https://github.com/benmvp/learning-es6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Learning ES6</em> Github repo</a>.</p>\n<p>You just <em>know</em> you’re interested, so keep on reading!</p>\n<h2 id=\"a-quick-look-at-code-classlanguage-textvarcode\" style=\"position:relative;\"><a href=\"#a-quick-look-at-code-classlanguage-textvarcode\" aria-label=\"a quick look at code classlanguage textvarcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A quick look at <code class=\"language-text\">var</code></h2>\n<p>Before we jump into <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>, let’s remind ourselves about how <code class=\"language-text\">var</code> works. In the <a href=\"/blog/learning-es6-history-of-ecmascript/\">History of ECMAScript</a>, we learned that Brandon Eich supposedly created JavaScript in 10 days. I still find that hard to believe, but the way <code class=\"language-text\">var</code> declarations work in JavaScript may very well be the proof that it really was developed that quickly.</p>\n<p><a href=\"https://twitter.com/slicknet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nicholas C. Zakas</a> explains it best in his book <a href=\"https://leanpub.com/understandinges6/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Understanding ECMAScript 6</em></a>:</p>\n<blockquote>\n<p>Traditionally, one of the tricky parts of JavaScript has been the way that <code class=\"language-text\">var</code> declarations work. In most C-based languages [such as C++, Java or C#], variables are created at the spot where the declaration occurs. In JavaScript, however, this is not the case. Variables declared using <code class=\"language-text\">var</code> are hoisted to the top of the function (or global scope) regardless of where the actual declaration occurs.</p>\n</blockquote>\n<p>Most of the time we don’t run into any problems with <code class=\"language-text\">var</code>, but when we accidentally do, the resulting bugs can be hair-pulling:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">varExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> myVar <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myVar after declaration'</span><span class=\"token punctuation\">,</span> myVar<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// even though laterVar is defined later on in the function</span>\n  <span class=\"token comment\">// it is \"hoisted\" to the beginning of the function &amp;</span>\n  <span class=\"token comment\">// initialized to undefined. In most C-style languages this would</span>\n  <span class=\"token comment\">// be an error.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laterVar before declaration'</span><span class=\"token punctuation\">,</span> laterVar<span class=\"token punctuation\">)</span>\n\n  laterVar <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token comment\">// image some legitimate conditional</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myVar <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// accidental redefintion of myVar results</span>\n    <span class=\"token comment\">// in outer defined myVar being reassigned</span>\n    <span class=\"token comment\">// to 'foo'</span>\n    <span class=\"token keyword\">var</span> myVar <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n    <span class=\"token keyword\">var</span> innerVar <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myVar inside block'</span><span class=\"token punctuation\">,</span> myVar<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// since this declaration was \"hoisted\", it's as if it's no</span>\n  <span class=\"token comment\">// longer here but at the top of the function</span>\n  <span class=\"token keyword\">var</span> laterVar\n\n  <span class=\"token comment\">// looking at the code laterVar _should_ be undefined,</span>\n  <span class=\"token comment\">// but it has the value 10 from earlier</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laterVar after declaration'</span><span class=\"token punctuation\">,</span> laterVar<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// we would expect myVar to still be 7</span>\n  <span class=\"token comment\">// but it was redefined and overwritten</span>\n  <span class=\"token comment\">// w/in the conditional</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myVar outside block'</span><span class=\"token punctuation\">,</span> myVar <span class=\"token operator\">===</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// we would expect innerVar to no longer be accessible</span>\n  <span class=\"token comment\">// since it was defined w/in the if-block, but it was</span>\n  <span class=\"token comment\">// \"hoisted\" as well</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerVar outside block'</span><span class=\"token punctuation\">,</span> innerVar<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">varExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can imagine if your function was more complicated how you could accidentally re-declare your variables and be confused by why the function was misbehaving. This is why there are <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSHint</a> and <a href=\"http://eslint.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a> rules that all <code class=\"language-text\">var</code> declarations <strong>must</strong> be at the top of the function.</p>\n<h2 id=\"code-classlanguage-textletcode-is-the-new-code-classlanguage-textvarcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textletcode-is-the-new-code-classlanguage-textvarcode\" aria-label=\"code classlanguage textletcode is the new code classlanguage textvarcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">let</code> is the new <code class=\"language-text\">var</code></h2>\n<p><code class=\"language-text\">let</code> works similarly to <code class=\"language-text\">var</code>, but the variable it declares is block-scoped; it <em>only</em> exists within the current block.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> value\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside block'</span><span class=\"token punctuation\">,</span> letValue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// redeclaration of letValue would be a SyntaxError</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Accessing letValue is a ReferenceError because it</span>\n    <span class=\"token comment\">// was defined w/in if-block</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letValue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// if we get here, it means that the JS engine didn't</span>\n    <span class=\"token comment\">// throw an exception, which means that the engine</span>\n    <span class=\"token comment\">// (or transpiled code) did not faithfully reproduce</span>\n    <span class=\"token comment\">// how let should work</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'let not faithfully handled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// e is a ReferenceError</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'letValue not accessible'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see it’s a <code class=\"language-text\">ReferenceError</code> if you try to access a variable outside of the block in which it was declared. With <code class=\"language-text\">var</code> we would’ve received <code class=\"language-text\">undefined</code>. Also redeclaring a let variable is a <code class=\"language-text\">TypeError</code>. With a <code class=\"language-text\">var</code> declaration you would get no such warning. In a nutshell, <code class=\"language-text\">let</code> works how you probably thought <code class=\"language-text\">var</code> worked.</p>\n<h3 id=\"transpiled-code-classlanguage-textletcode-code\" style=\"position:relative;\"><a href=\"#transpiled-code-classlanguage-textletcode-code\" aria-label=\"transpiled code classlanguage textletcode code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transpiled <code class=\"language-text\">let</code> code</h3>\n<p>When <code class=\"language-text\">let</code> declarations are transpiled down to ES5, they are basically converted to <code class=\"language-text\">var</code> declarations. If you tried to transpile the code above but with <code class=\"language-text\">let letValue = &#39;foo&#39;;</code> uncommented, both Babel and TypeScript throw compilation errors. They won’t even transpile the code because of the redeclaration.</p>\n<p>However, accessing <code class=\"language-text\">letValue</code> out of block scope is a different story. The <a href=\"https://github.com/benmvp/learning-es6/blob/master/examples/transpiled-es5/block-scoping-babel.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transpiled Babel code</a> changes all of the appropriate uses of <code class=\"language-text\">letValue</code> to <code class=\"language-text\">_letValue</code>. The result is that there is still a <code class=\"language-text\">ReferenceError</code> when accessing <code class=\"language-text\">letValue</code> within the <code class=\"language-text\">try-catch</code> block even with the transpiled code using <code class=\"language-text\">var</code> declarations. <a href=\"https://github.com/benmvp/learning-es6/blob/master/examples/transpiled-es5/block-scoping-traceur.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Traceur</a> unfortunately is not as robust resulting in the <code class=\"language-text\">console.log(&#39;let not faithfully handled&#39;);</code> line actually being executed. I’m wondering if the <code class=\"language-text\">try-catch</code> is somehow throwing Traceur off. Something to keep in mind when choosing a transpiler.</p>\n<h3 id=\"shadowing-variables-with-code-classlanguage-textletcode\" style=\"position:relative;\"><a href=\"#shadowing-variables-with-code-classlanguage-textletcode\" aria-label=\"shadowing variables with code classlanguage textletcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadowing variables with <code class=\"language-text\">let</code></h3>\n<p>We saw in the <code class=\"language-text\">varExample</code> earlier that when you redeclare a variable with <code class=\"language-text\">var</code> in a nested scope (such as an <code class=\"language-text\">if</code>-block), the variable isn’t actually redeclared. Since the variables had the same name, the second declaration just resulted in the variable’s value being reassigned. This isn’t the case with <code class=\"language-text\">let</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">letShadowExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this x \"shadows\" the x defined in the outer scope.</span>\n    <span class=\"token comment\">// this new x just exists within the scope of the</span>\n    <span class=\"token comment\">// if-block</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n\n    <span class=\"token comment\">// x should be 21</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x inner block'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// x should be 15</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x outer block'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">letShadowExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Within the nested scope of the <code class=\"language-text\">if</code>-block, the <code class=\"language-text\">let</code> declaration of <code class=\"language-text\">x</code> is different than that of the outer scope. Now hopefully you wouldn’t write code like this because it’s very confusing, but at least it now works like how other major programming languages work. Both Babel and Traceur rename the nested <code class=\"language-text\">x</code> variable to something different so that when the code is transpiled to ES5 and using <code class=\"language-text\">var</code> declarations, the variables are treated differently.</p>\n<h2 id=\"keeping-things-code-classlanguage-textconstcode\" style=\"position:relative;\"><a href=\"#keeping-things-code-classlanguage-textconstcode\" aria-label=\"keeping things code classlanguage textconstcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keeping things <code class=\"language-text\">const</code></h2>\n<p>A <code class=\"language-text\">const</code> declaration works much like <code class=\"language-text\">let</code> except you <em>must</em> initialize the variable immediately with a value. And that value cannot be changed afterwards. You will get a <code class=\"language-text\">SyntaxError</code> if you either fail to initialize the variable at declaration or if you try to reassign its value. Let’s take a look at a quick example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">constExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">NAME_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">UNFROZEN_OBJ_CONST</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'adam'</span><span class=\"token punctuation\">,</span> val<span class=\"token operator\">:</span> <span class=\"token string\">'eve'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">FROZEN_OBJ_CONST</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'jesus'</span><span class=\"token punctuation\">,</span> val<span class=\"token operator\">:</span> <span class=\"token string\">'paul'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// All const declarations must be initialized.</span>\n\t<span class=\"token comment\">// It's a SyntaxError otherwise</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">VALUE_KEY</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Const variables are read-only, so trying to</span>\n\t<span class=\"token comment\">// reassign is a SyntaxError too</span>\n\t<span class=\"token constant\">NAME_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// GOTCHA: even though the object is const, you can still</span>\n\t<span class=\"token comment\">// change properties of it. It's the variable</span>\n\t<span class=\"token comment\">// that cannot be reassigned</span>\n\t<span class=\"token constant\">UNFROZEN_OBJ_CONST</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'moses'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// by freezing the object, using ES5 Object.freeze</span>\n\t<span class=\"token comment\">// its properties cannot be changed.</span>\n\t<span class=\"token comment\">// in strict mode this a TypeError. In non-strict</span>\n\t<span class=\"token comment\">// mode the value silently doesn't change</span>\n\t<span class=\"token constant\">FROZEN_OBJ_CONST</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token string\">'peter'</span><span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const value'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NAME_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unfrozen object'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UNFROZEN_OBJ_CONST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frozen object'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FROZEN_OBJ_CONST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">constExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As shown in the code, a variable declared via <code class=\"language-text\">const</code> means that it cannot be a reassigned, but it does not mean that its contents cannot be changed when it is an object. We can somewhat fix this problem (if it is one), by using the <a href=\"http://speakingjs.com/es5/ch17.html#freezing_objects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Object.freeze</code></a> method we got from ES5.</p>\n<h2 id=\"entering-the-temporal-dead-zone\" style=\"position:relative;\"><a href=\"#entering-the-temporal-dead-zone\" aria-label=\"entering the temporal dead zone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entering the Temporal Dead Zone</h2>\n<p>The <em>temporal dead zone</em> (TDZ) is just a fancy term used for the time period where code execution is in the scope of a variable declared by <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code>, but <em>before</em> it is actually declared. The variable is in scope, but not yet initialized. Accessing an uninitialized variable is a <code class=\"language-text\">ReferenceError</code>. Let’s take a look at some example code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Uninitialized “binding” for `disciple` variable is created</span>\n\t<span class=\"token comment\">// upon entering scope. TDZ for `disciple` variable begins</span>\n\n\t<span class=\"token comment\">// accessing a variable in TDZ either to get or set</span>\n\t<span class=\"token comment\">// is a ReferenceError</span>\n\tdisciple <span class=\"token operator\">=</span> ‘matthew’<span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>disciple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// TDZ ends at declaration and `disciple` is initialized</span>\n\t<span class=\"token comment\">// w/ `undefined` value</span>\n\t<span class=\"token keyword\">let</span> disciple<span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>disciple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n\tdisciple <span class=\"token operator\">=</span> ‘thomas’<span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>disciple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‘thomas’</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So why is it called the <em>temporal</em> dead zone? It’s because the dead zone is based on the period of code execution <em>time</em> versus where the code actually resides:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">temporalDeadZoneExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TDZ for `value` begins</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Even though this function is defined _before_</span>\n    <span class=\"token comment\">// `value` in the code, it's not called until after</span>\n    <span class=\"token comment\">// `value` is declared, so accessing it is OK.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value is: '</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TDZ for `value` continues. Accessing `value`</span>\n  <span class=\"token comment\">// here would be a ReferenceError. Calling `func`</span>\n  <span class=\"token comment\">// here would cause a ReferenceError.</span>\n\n  <span class=\"token comment\">// TDZ ends with declaration of `value`</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n\n  <span class=\"token comment\">// no longer in TDZ when calling function so now</span>\n  <span class=\"token comment\">// any access of `value` is ok</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">temporalDeadZoneExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Variables declared by <code class=\"language-text\">var</code> don’t have a TDZ because the variables are “hoisted” to the beginning of functions. Therefore they are always declared as well as initialized with a value of <code class=\"language-text\">undefined</code>.</p>\n<h2 id=\"code-classlanguage-textletcode-and-loops\" style=\"position:relative;\"><a href=\"#code-classlanguage-textletcode-and-loops\" aria-label=\"code classlanguage textletcode and loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">let</code> and loops</h2>\n<p>Unbeknownst to most JavaScript developers, the iteration variable declared with <code class=\"language-text\">var</code> within the head of <code class=\"language-text\">for</code>-loops (such as <code class=\"language-text\">for (var i = 0; i &lt; 5; i++)</code>) is available outside of the <code class=\"language-text\">for</code>-loop. Because of block-level scoping, with <code class=\"language-text\">let</code> this is no longer the case.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">simpleLoopExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i='</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j='</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// i is accessible outside of the for loop</span>\n  <span class=\"token comment\">// and has the value 5</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after i='</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// j is not accessible outside of the for loop</span>\n  <span class=\"token comment\">// and is a ReferenceError</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after j='</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">simpleLoopExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In practice, this typically is not a problem because we would rarely try to access a loop iteration variable outside of a <code class=\"language-text\">for</code>-loop. However, this issue can crop up when newbie JavaScript developers create callback functions within loops.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callbackLoopVarExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> $body <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create 5 buttons with the index in the name</span>\n    <span class=\"token keyword\">var</span> $button <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button>var '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/button>'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// wire click handler w/ callback using arrow function!</span>\n    $button<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// BUG! When button is clicked, the value of `i` is 5!</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var button '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">' clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// add button to the body</span>\n    $body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>$button<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">callbackLoopVarExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>For those not too familiar with JavaScript development, it may not be immediately apparent why the <code class=\"language-text\">console.log</code> message always has <code class=\"language-text\">&#39;var button 5 clicked!&#39;</code>. Because the <code class=\"language-text\">i</code> variable is “hoisted” to the top of the function it still has a value after the for loop has ended. That value is <code class=\"language-text\">5</code>, which is what caused the termination of the loop. And since <code class=\"language-text\">i</code> is scoped to the whole function, all of the callback functions are bound to the same <code class=\"language-text\">i</code>, resulting in them all displaying <code class=\"language-text\">&#39;var button 5 clicked!&#39;</code>.</p>\n<p>The ES3/ES5 way of solving this problem was to use a separate named function or an IIFE that would create a new scope for the iteration variable such that each callback function would be bound to its own version. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callbackLoopNamedFunctionExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> $body <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Create a named function passing in the loop iteration variable</span>\n  <span class=\"token comment\">// which creates a unique scope for each iteration so</span>\n  <span class=\"token comment\">// that the callback function binds to its own variable.</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">loop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create 5 buttons with the index in the name</span>\n    <span class=\"token keyword\">var</span> $button <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button>function '</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/button>'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// wire click handler w/ callback using arrow function!</span>\n    $button<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// Fixed! `index` is unique per iteration</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function button '</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">' clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// add button to the body</span>\n    $body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>$button<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">callbackLoopNamedFunctionExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now when we click each button, the appropriate message is displayed. This problem could have also been solved by having an IIFE defined within the <code class=\"language-text\">for</code>-loop in much the way our <code class=\"language-text\">loop</code> function variable was defined. The need for this sort of workaround goes away when declaring the iteration variable via <code class=\"language-text\">let</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callbackLoopLetExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> $body <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create 5 buttons with the index in the name</span>\n    <span class=\"token keyword\">let</span> $button <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button>let '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/button>'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// wire click handler w/ callback using arrow function!</span>\n    $button<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// Fixed! `i` is a different variable declaration for</span>\n      <span class=\"token comment\">// each iteration of the loop as one would expect!</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'let button '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">' clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// add button to the body</span>\n    $body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>$button<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">callbackLoopLetExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The key here is using <code class=\"language-text\">let</code> for the iteration variable. The <code class=\"language-text\">i</code> variable is now a new declaration for each iteration of the loop, resulting in the callback function having its own <code class=\"language-text\">i</code> variable. Once again, things work with <code class=\"language-text\">let</code> as we would’ve expected them with <code class=\"language-text\">var</code>.</p>\n<p>One thing to note is that both Babel &#x26; Traceur, when they notice this issue, use the named function approach when transpiling the ES6 code down to ES5. This means that if you have a bug in your code, the structure of the transpiled code will look dramatically different than that of your ES6 code. As long as you have a source map in your transpiled code <strong>and</strong> your ES6 code is also accessible, any line numbers provided by the engine should point you back to the write place in your ES6 code.</p>\n<p>Final note on loops. Variables declared by <code class=\"language-text\">let</code> work the same way with <code class=\"language-text\">for-in</code> loops as well. ECMAScript 6 added a new type of loop, the <code class=\"language-text\">for-of</code> loop that works with iterators (also added w/ ES6), but we’ll talk about those in a later article.</p>\n<h2 id=\"working-with-parameters\" style=\"position:relative;\"><a href=\"#working-with-parameters\" aria-label=\"working with parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with parameters</h2>\n<p>Declaring a variable with <code class=\"language-text\">let</code> with the same name as a function parameter is a <code class=\"language-text\">TypeError</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sellFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>However, if that <code class=\"language-text\">let</code> declaration happens within a nested scope (such as an <code class=\"language-text\">if</code>-block), then the variable will be <a href=\"#shadowing-variables-with-let\">shadowed</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sellFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create a simple code block</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this let declaration of `fruits` shadows the</span>\n    <span class=\"token comment\">// `fruits` parameter</span>\n    <span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// `fruits` here is the parameter value</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And like all of the examples prior, <code class=\"language-text\">var</code> does not act this way. When a parameter is redeclared using <code class=\"language-text\">var</code> with the same, whether at the top-level function scope or within a nested block, nothing happens. Due to <code class=\"language-text\">var</code> declarations being functioned scoped, it’s as if those declarations weren’t even there because the parameter has already declared the variable in the scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sellFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this declaration does nothing</span>\n  <span class=\"token keyword\">var</span> fruits\n\n  <span class=\"token comment\">// create simple code block</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the declaration does nothing, but the assignment</span>\n    <span class=\"token comment\">// does assign the parameter value to []</span>\n    <span class=\"token keyword\">var</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// `fruits` here is still [] from the assignment</span>\n  <span class=\"token comment\">// in the block</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"code-classlanguage-textvarcode-vs-code-classlanguage-textletcode-vs-code-classlanguage-textconstcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textvarcode-vs-code-classlanguage-textletcode-vs-code-classlanguage-textconstcode\" aria-label=\"code classlanguage textvarcode vs code classlanguage textletcode vs code classlanguage textconstcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">var</code> vs <code class=\"language-text\">let</code> vs <code class=\"language-text\">const</code></h2>\n<p>Now that we know how <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> work, when should we use them in place of <code class=\"language-text\">var</code>? Here are some suggestions:</p>\n<ul>\n<li>Use <code class=\"language-text\">const</code> for variables you want to be immutable. This works best for primitive values (like <code class=\"language-text\">Number</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">Boolean</code>, etc). You can use <code class=\"language-text\">const</code> for objects, but you should probably use <code class=\"language-text\">Object.freeze</code> in concert to make the object truly immutable. You could use <code class=\"language-text\">const</code> for a mutable object, but that defeats the “spirit” of <code class=\"language-text\">const</code>.</li>\n<li>Use <code class=\"language-text\">let</code> for the mutable variables (i.e. everything else)</li>\n<li>The only time you may need to still use <code class=\"language-text\">var</code> is for objects in the global scope, particularly ES3- and ES5-style namespaces or modules. Ideally you would convert those to ES6-style modules, but for backwards compatibility you may still need to use <code class=\"language-text\">var</code>.</li>\n<li>Do <strong>not</strong> mix and match <code class=\"language-text\">let</code> and <code class=\"language-text\">var</code> in a file. Be consistent, otherwise it’ll lead to even more confusion.</li>\n<li>Do <strong>not</strong> do a global search and replace of <code class=\"language-text\">var</code> for <code class=\"language-text\">let</code>. You may have code that is unintentionally relying on the quirkiness of <code class=\"language-text\">var</code>. You should do the conversion manually one file at a time.</li>\n</ul>\n<h2 id=\"javascript-engine-support\" style=\"position:relative;\"><a href=\"#javascript-engine-support\" aria-label=\"javascript engine support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript engine support</h2>\n<p>According to the <a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 compatibility table</a>, the following JavaScript engines support <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>:</p>\n<ul>\n<li>Babel</li>\n<li>Traceur</li>\n<li>TypeScript</li>\n<li>Edge</li>\n<li>Chrome (with <a href=\"chrome://flags/#enable-javascript-harmony\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">experimental flag enabled</a> and in strict mode)</li>\n<li>Firefox (code blocks must be wrapped in <code class=\"language-text\">&lt;script type=&quot;application/javascript;version=1.7&quot;&gt;</code> tag)</li>\n<li>Opera (in strict mode)</li>\n<li>Node 5 (in strict mode)</li>\n</ul>\n<p>The most notable missing engine is Safari. Of course IE 11 and lower do not support any ES6 features. In order to have the engine faithfully support <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>, particularly the temporal dead zone, you should ensure your scripts are running in strict mode.</p>\n<h2 id=\"additional-resources\" style=\"position:relative;\"><a href=\"#additional-resources\" aria-label=\"additional resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional resources</h2>\n<p>You can check out the <a href=\"https://learning-es6.benmvp.com/#block-scoping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Learning ES6</em> examples page</a> for the <a href=\"https://github.com/benmvp/learning-es6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Learning ES6</em> Github repo</a> where you will find all of the code used in this article running natively in the browser (for those that support <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>). There are also examples running through Babel and Traceur transpilation.</p>\n<p>Other super helpful resources:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_variables.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Variables and scoping</a> in <a href=\"http://exploringjs.com/es6/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Exploring ES6</em></a> by <a href=\"https://twitter.com/rauschma\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Axel Rauschmayer</a></li>\n<li><a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Block bindings</a> in <a href=\"https://leanpub.com/understandinges6/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Understanding ECMAScript 6</em></a> by <a href=\"https://twitter.com/slicknet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nicholas C. Zakas</a></li>\n<li><a href=\"https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let and const</a> in <a href=\"https://hacks.mozilla.org/category/es6-in-depth/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>ES6 in Depth</em></a> by <a href=\"https://twitter.com/jorendorff\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jason Orendorff</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let</a> on <a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></li>\n</ul>\n<h2 id=\"coming-up-next\" style=\"position:relative;\"><a href=\"#coming-up-next\" aria-label=\"coming up next permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coming up next…</h2>\n<p>We will be continuing the <a href=\"/learning-es6-series/\"><em>Learning ES6</em> series</a> by looking at the fun new <a href=\"/blog/learning-es6-destructuring/\"><em>destructuring</em></a> techniques introduced with ES6. Until then…</p>","excerpt":"Coming off the heels of discussing arrow functions, let’s continue the Learning ES6 series talking about block-level scoping in ECMAScript…","timeToRead":15,"wordCount":{"words":1751},"fields":{"slug":"/learning-es6-block-level-scoping-let-const/"},"frontmatter":{"title":"Block-level scoping with let and const","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","block-scoping","const","let"],"category":"Learning ES6","date":"August 30, 2015","dateIso":"2015-08-30"}},"categoryPosts":{"edges":[{"node":{"id":"8d379e3f-4d21-5888-8979-e9b26553e102","frontmatter":{"title":"Nested string interpolation in JavaScript","shortDescription":"A quick look at how nested string interpolation within template literals is possible with ES6","tags":["es6","strings","javascript","interpolation","template","literals"],"date":"April 27, 2020","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='291'%20viewBox='0%200%20400%20291'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20146v145h401V0H0v146m303-75c-20%203-21%206-28%2044-3%2021-3%2026-1%2022%201-1%201-1%201%202%200%204%202%206%204%203v1c0%202%200%202%201%201l1%201-4%201c-5%200-6%205-6%2019l1%2013%203%201%201%201c0%203%203%201%203-2%201-2%200-4-1-7-5-6-4-15%202-18l3-2%201-1c1%201%201%200%201-3s0-4%201-2c1%204%203%207%205%207v-2c-1-2%200-7%201-7l2%2012c0%206%200%206%202%206s2%200%200%201c-3%201-4%205-2%207l-1%204v2c2%200%203%202%201%202s-5%204-3%205l-2%202-4%204-2%202-2%205-2%204v10c1%201%207-5%209-9l2-3%201-1c0-2%203-5%205-6l3%204%202%203%204%203c4%204%209%206%2012%206l3%202c1%202%201%202%202%201%200-2%202-1%202%201h1l2-1c1%202%205%200%205-2l1-3-1-2c-2-2-2-2-2%200s0%202-1%201l-2-2c-4%201-15-4-18-8l-4-5-2-5v-3l-1%203-1%204v-16c1%201%202-6%200-8v-2c1%200%202-1%201-2l1-3%202-3%203-9%202%203c1%204%202%204%203-2%201-4%203-5%203%200%201%203%202%203%204-1l1-4v3c0%203%202%204%202%201l1-2%202-4c0-3%200-3%201-1s1%202%202-2l1-3%201%201v-6l1-5c2%202%200-6-5-21l-1-6-1-6-2-7c0-2%200-2-1-1l-3-2c-3-5-11-9-16-8M196%2096v2c0%202%200%202-1%201l-2%202-2%201-7%203c-6%203-10%204-7%201%202%200%202-1%201-1l2-2c2-1%205-6%204-7l-5%203-6%204c-4%201-4%202-1%203%202%200%203%202%201%202v8c-1%207%207%2014%2016%2014%208%200%2017-7%2017-14%200-2%200-2%203%201%204%203%205%204%205%202l-3-3-4-4v-10c-2%201-6%200-6-3-1-2-1-2-2-1h-1c1-2-2-4-2-2M83%20120l-2%201c-3-1-9%203-11%207-1%204-3%2023-1%2023%201%200%204-2%202-2l-1-1%202-1c3%200%202%203-1%205-6%202-8%2024-4%2035%202%204%203%205%203%202%200-2%200-3%205-3%208%200%209-1%201-1l-7-1-1-2-1-1%208%201c1%201%202%200%202-1%201-1%200-1-2-1-3%200-3%200-1-1%202%200%203-1%203-3l-2-2h-3c0%202-2%203-4%201v-1l1-4%201-5c1%200%203-2%203-4l1-3%202%202%202%201c-1-3%205-2%206%201%201%201%201%202%202%201h2l2-2h-4c-1-2-1-4%201-4l-3-2-2-1%203-1%201-2c1-1%200-1-3-1-2%200-4%200-3-1l-2-1-2-1c-1-1%205-1%208%201%205%203%2013%200%2016-4l2-7%201-5v5l-1%207c-1%201%200%202%201%202%202%201%203-3%202-10%200-7-4-13-8-15s-13-3-14-1m-1%203l-5%206c0%201%2010-3%2011-5%201-1%201-1%203%201%208%207%2014%208%209%202s-12-8-18-4m101%209l-1%204-4%201c-2%200-3%200-4%203%200%202-1%203-2%203l1%201c2%201%203%203%201%203l-2%202-1%201c0-2-2-3-2%200v1c1%200%202%201%202%203%200%204-1%205-3%204-1-1-2-4%200-3l1-1-2-1c-2%200-1%205%200%206v3c-2%202-3%202-4%201h-1l1%203c0%201%202%200%203-2%202-1%202-1%202%201%201%202%200%202-2%202l-1%209c1%2010%201%2013%203%2011v-11c-1-4%201-7%204-4h1l4-1%204%201v4c1%201%200%202-1%202v3c3%200%204%205%202%207-3%202-6%203-7%202%200-2-7-2-7%200l2%201c1%201%202%201%201%202l1%203%202%201-1%201c-2-2-2%201%200%203l2%203c0%202%202%202%204%201%202-2%201-4-1-4-1%201-5-2-4-3h3l4-1c1-1%201%200%201%202%200%205%202%206%204%202s7-4%208%200l-1%201h-2c0%201%203%203%205%203v-8l3%202c2%202%208%201%209-1%200-2%200-2%201-1%201%202%202%201%200-2-1-2-1-2-2-1%200%202%200%202-1%201h-2c-2%201-2%201-2-1s0-2-1-1c-2%202-7%201-8-2v-3c2%200%201-2-1-2-2%201-3-5-1-7l1-2%201-1c3%200%204%200%204-3l1-4v-1l3-1c2%200%202%200%201%201s-1%201%201%203c3%201%203%201%202%204-2%203-2%203%200%202%203-1%203-1%206%201%201%202%202%202%202%201l-1-2-1-4-4-8-1-1%202-1c2%200%202%200%200-3%200-2-2-3-2-2l-1-2c0-2%201-2%205-2%202%200%201-4-1-5-2%200-5%203-5%206l-1%202-1-1c1-2-1-6-3-7l-3-2-2-4-2-2h3c3%200%203%200%203-4l-1-6c-2-1-5%203-4%205%200%202%200%202%202%200l1-1%201%202c0%202%200%202-2%202s-3-1-3-2c-1-1-1%200-1%201%201%202%200%203-1%203l-1-3c0-4-6-9-6-6m142%2013v5h3l1%201v3c2%202%200%208-4%2012-4%205-5%2012-2%2014s7%201%207-1l2-2c1%200%202-5%201-11%200-7%200-8%202-3l1%204v-4c0-3%200-4-1-3l-1-1-1-2v-3c1-2-2-7-4-6l-2-2c-1-3-2-4-2-1m-139%201c-1%201-2%202-1%203%200%202%200%202-1%201l-5%202c-4%203-4%209%200%2010l2%202c0%201%200%202%202%203l3%202c5%203%2013-3%2010-7v-3c1-4%200-7-3-7-2%201-2%201-2-1%201-3-3-6-5-5m-96%206l5%202c3%201%204%205%202%208-1%202-2%204%200%203l2%201h1v-3c1-3%204%202%205%207%200%203%201%205%202%203v-1l-1-2h1c3%201-1-15-4-17-2-2-5-3-4-1l-2%201-3-1h-1c-2%200-2%200-1-1s1-1-1-1h-3l2%202'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.38,"src":"/static/715a9d3df9866457c860bd5661ae2f7b/dee3b/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg","srcSet":"/static/715a9d3df9866457c860bd5661ae2f7b/f81b6/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 138w,\n/static/715a9d3df9866457c860bd5661ae2f7b/cf463/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 275w,\n/static/715a9d3df9866457c860bd5661ae2f7b/dee3b/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 550w,\n/static/715a9d3df9866457c860bd5661ae2f7b/c1303/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 825w,\n/static/715a9d3df9866457c860bd5661ae2f7b/42364/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 1100w,\n/static/715a9d3df9866457c860bd5661ae2f7b/98422/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.jpg 4950w","srcWebp":"/static/715a9d3df9866457c860bd5661ae2f7b/25338/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp","srcSetWebp":"/static/715a9d3df9866457c860bd5661ae2f7b/c6300/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 138w,\n/static/715a9d3df9866457c860bd5661ae2f7b/88818/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 275w,\n/static/715a9d3df9866457c860bd5661ae2f7b/25338/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 550w,\n/static/715a9d3df9866457c860bd5661ae2f7b/6d9da/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 825w,\n/static/715a9d3df9866457c860bd5661ae2f7b/5c86c/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 1100w,\n/static/715a9d3df9866457c860bd5661ae2f7b/e3a3a/russian-nesting-dolls-blake-weyland-9hhOVsf1lpU-unsplash.webp 4950w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Three assorted Russian nesting dolls"},"fields":{"slug":"/nested-string-interpolation-in-javascript/"},"excerpt":"4.5 years ago I wrote a blog post on template literals as part of my Learning ES6 series. I went into lots of details about how template…"}},{"node":{"id":"b85789bc-d804-5253-a694-4167d8c2793e","frontmatter":{"title":"12 tricks for ES6 fun","shortDescription":"A quick look at using ES6 to solve \"common-ish\" tasks in JavaScript","tags":["ecmascript-6","es6","javascript","learning-es6","tricks"],"date":"October 25, 2016","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='189'%20viewBox='0%200%20400%20189'%20preserveAspectRatio='none'%3e%3cpath%20d='M290%2010A27165%2027165%200%200150%2039l2%2018a22681%2022681%200%200115%20126l12-1a3796%203796%200%2000175-20%2032130%2032130%200%200192-11l-1-5c0-3-1-4-2-4-1%201-1%201%200%200%202%200%201-18-2-20v-1A63454%2063454%200%2001327%205l-37%205m18%2012a2248%202248%200%2001-100%2012A35879%2035879%200%200167%2050l4%2028a5871%205871%200%200111%2090l54-5a30367%2030367%200%2001187-23h4l-2-15a14398%2014398%200%2001-13-101c0-3-1-3-4-2m-93%2023c-12%206-10%2020%203%2024l8%202c4%201%206%204%203%206-2%202-11%202-15%200s-4-2-4%203c1%204%201%205%205%206%2014%204%2028-3%2027-14-1-6-5-9-14-12-8-2-10-3-10-6l10-3c7%202%2010%202%2010%201l-1-4c0-5-14-7-22-3m-41%204l-8%201v3l1%209%202%2017c1%2014%201%2014%207%2013h5v-9l-1-8%206-1c10-2%2014-5%2014-13%200-11-7-14-26-12m-27%204h-3v7a287%20287%200%20014%2027l1%207h8c2%200%202%202-1-26l-1-16h-3l-5%201m120%201h-4c-5%200-5%200-4%2011l1%209h3c4-1%204-1%203-7s0-9%203-9c2%200%203%201%203%207l1%207h4c3%200%203%200%203-3l-2-7-2-7c-1-2-8-3-9-1m-146%202l-13%201c-14%202-14%202-14%206%201%205%201%205%209%203h9v2c1%201%202%200%202-1%201-1%201-1%201%201%200%203%200%203-2%202s-2-1-2%204l2%2015%201%2011h4l5-1c2%200%202-4-1-24l-1-11%208-1h7v-8h-4l-11%201m178%2024c-10%202-15%209-13%2016%201%205%205%208%2014%2010%208%203%2011%205%208%208-3%201-10%201-15-1l-5-1%201%205c0%204%201%205%206%206%2013%203%2025-3%2025-13%200-7-4-11-15-14-7-2-9-4-7-7h16c2%201%202%201%202-1%200-5-1-7-5-8h-12m-31%204c-4%200-4%201-8%208l-4%207-1%202c-2%203-3%202-4-7%200-8%200-8-6-7-6%200-6-1-3%2021s3%2022%206%2022c4%200%209-2%207-2s-2%200-1-1v-12l-1-5%2010%208%209%209%206-1%207-1-6-7c-6-5-7-6-8-5l-2%201v-1c2-2%202-2-1-5l-4-3%203-5a1209%201209%200%20017-17l-6%201m-58%207c-15%204-22%2016-17%2029%204%2012%2021%2018%2035%2011%205-2%206-4%201-4-3%200-2-1%201-1%202-1%203%200%203%201l1%201v-10l-6%203-8%203-3%201c-1%201-9%200-8-1l-2-2c-2-2-4-6-4-9%200-8%205-13%2015-14l5-1%201-1%201%201c-1%201%200%202%203%203l3%201v-5l-2-5c-1-2-15-2-19-1m-39%205c-2%200-2%200-1%207v8l6%203%202%201%202%201c2%200%202%200%202-7-2-14-3-15-11-13m-37%204l-9%201%205%2039v4l5-1%206-1-2-15c-1-1%200-2%202-2%204-1%207%201%2010%209%204%206%205%207%2010%206l6-1-10-16c-2-2-2-2-1-4%201-1%200-2-4-3h-14l-1-5v-3h5c4%200%205%200%206%202l3%201%205%201c2%202%204-2%202-6-2-6-8-8-24-6m-29%204l-18%202c-10%200-12%201-11%206l1%203%207-1c7%200%208%200%208%202l4%2029v3l5-1%206-1-1-8-2-17v-9h3l7-1h4v-5c0-5%201-4-13-2m77%2015v1h-10l1%209c0%2011%200%2010%206%209%206%200%206%200%205-11l-2-8'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.123076923076923,"src":"/static/354a02a0f85a93b2bf043eb3d7cb1c25/dee3b/tips-and-tricks.jpg","srcSet":"/static/354a02a0f85a93b2bf043eb3d7cb1c25/f81b6/tips-and-tricks.jpg 138w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/cf463/tips-and-tricks.jpg 275w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/dee3b/tips-and-tricks.jpg 550w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/7d509/tips-and-tricks.jpg 720w","srcWebp":"/static/354a02a0f85a93b2bf043eb3d7cb1c25/25338/tips-and-tricks.webp","srcSetWebp":"/static/354a02a0f85a93b2bf043eb3d7cb1c25/c6300/tips-and-tricks.webp 138w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/88818/tips-and-tricks.webp 275w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/25338/tips-and-tricks.webp 550w,\n/static/354a02a0f85a93b2bf043eb3d7cb1c25/2aa8d/tips-and-tricks.webp 720w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"ES6 tricks"},"fields":{"slug":"/learning-es6-12-tricks-for-es6-fun/"},"excerpt":"I wrapped up the Learning ES6 series covering Generators as Iterators at the beginning of the year. I had considered talking about…"}},{"node":{"id":"e5e9f291-b136-598e-9222-c150da823a4d","frontmatter":{"title":"Generators as iterators","shortDescription":null,"tags":["ecmascript-6","es6","generators","iterables","iterators","javascript","learning-es6"],"date":"January 13, 2016","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='308'%20viewBox='0%200%20400%20308'%20preserveAspectRatio='none'%3e%3cpath%20d='M249%208a2066%202066%200%2001-108%2010l-63%205c-50%204-49%204-52%2012-3%204-3%2021-1%2062a171078%20171078%200%20004%2089c1%2035%207%2041%2037%2043l5%202%205%202a503%20503%200%200024%2018l11%208v9c2%2018%207%2027%2019%2031%208%203%2014%202%2044-5%2066-16%2072-18%20120-28%2047-10%2051-11%2060-21%208-9%209-13%2012-54a16404%2016404%200%20016-64c6-73%206-79-6-91-4-5-6-6-37-14l-38-11c-14-4-27-5-42-3m18%208c-2%201-4%204-5%209%200%202%200%203%206%204l7%203%206%202%201%201h-9c-8%200-8%201-1%203h20a15836%2015836%200%200139-5c1-1-28-9-50-15-12-3-11-3-14-2m-22%202a1039%201039%200%2001-81%207A18643%2018643%200%200160%2035c-1%201%201%202%2012%207%206%203%207%203%2010%202%204-3%2016-5%2017-3h6l-2-1h-2c0-1%209-2%2010-1s1%200%201-1h1c0%202%202%203%202%201a947%20947%200%200022-5%20645%20645%200%2001117-8v-6l1-3h-4l-6%201m-58%2012c-9%202-10%202-10%204s0%202%209%204c10%202%2031%200%2031-4-1-4-17-6-30-4M34%2039l-1%2014c0%2012%200%2013%202%2013l12-3c0-2%201-2%201-1%200%202%201%202%203%202%203%200%204-1%205-8l2-7c1-2-3-4-16-10-7-2-7-2-8%200m187-1c-2%200-5%207-3%207a463%20463%200%200040-6%20551%20551%200%2001-37-1m-62%201c-13%202-15%203-14%205v1l-1-1-4-1c-4%200-4%202%202%203h4l2-1c2%200%207%204%206%205l9%201%2019-3c-3%200-6-2-6-5%200-2-4-5-6-5l-11%201m184%203l-10%202c-1%201-1%204%201%207%203%203%204%205%204%2011%201%207%202%209%203%209l3%201h5l2-1-1%201c-1%202-1%202%202%202l4%201%204%202%205%201%201-7c1-11-2-23-7-28-2-2-3-2-16-1m-228%207l-6%202-3%201c-2%200-3%200-2%202h-1l-3-1c-1%200-1%201%201%202h16c14-1%2023-3%2018-3l-5-2c-4-3-9-3-15-1M35%2089l1%2024a4411%204411%200%20014%2093c0%203%204%2010%205%209l-1-2-2-25-2-41c-1-28-2-27%204-28%203-1%205-5%203-6v-8%203c-1%203%202%205%207%204%202%200%203%200%202%201-3%200-2%201%201%203h6c3-1%206-4%203-4l-1%201c0%202-3%201-3%200-1-2%200-5%201-5%203%200-2-3-13-10a238%20238%200%2001-15-9m243%2018c-4%201-6%202-5%203%200%201%200%202-1%201%200-3-7-3-7%200l-1%2013c0%2012%200%2012%201%203v-9h3l16-2%201-4c0-6%200-6-7-5m-49%207a700%20700%200%2001-61%2010l-1%2019v18l1-16v-15h3a8494%208494%200%200160-10c2%200%202%201%202%2013l1%2013v-32h-5m70%208l-10%201c-2%200-3%204-3%2021v12l2-1%2012-2%209-1v-5l1-15c1-13%201-12-11-10m-149%204l-12%202a676%20676%200%20001%2029c0-20%200-22%202-22l10-2%2010-2h3v20l1%2020v-47h-2l-13%202m145%202c-4%205-5%209-1%2014l2%203%204-2c5-4%207-10%203-15-3-3-5-3-8%200m-46%205c-5%201-5%201-6%2010%200%209-1%209%208%207%204%200%205-1%204-2%200-2%200-2%202-2s2-1%202-7v-7h-3l-7%201m-66%2028c-10%201-15%203-15%204-1%201%200%201%204%201%203%200%204%200%203-1l1-2v1l3%201%205-1v-1h3l4-1h1c2%201%2012-1%2012-3%200-1-3-1-21%202m82%2023c-11%202-13%203-13%205s2%201%2017-2c11-2%2013-3%2011-4s-3-1-15%201m60%209c-2%202-6%203-11%201-4-2-4-2-5%200l-2%203h-17l3%203c3%204%205%204%2026-1%2014-3%2015-4%2011-7-3-3-3-3-5%201m-125%205c-2%200-2%201-1%203v2l-7%202-12%202c-2%200-2%200-1%202s5%203%205%201h2l1%201%201%201%205%202c4%203%207%202%208-2%200-2%201-3%203-4%202%200%202-1%202-5s-2-6-6-5m151%205a4528%204528%200%2000-51%2013c0%201%201%203%204%204l3%204c1%201%201%202%203%201l2%201c0%203%204%209%206%209v3c-3%204-3%204%203%207%2013%208%2031-5%2033-24%202-17%202-19-3-18m-200%2013c-8%202-8%201-8%209l-1%207%204-1c2-1%204-2%205-1l1%201%204-1c3-1%203-1%203-8l-1-7-7%201m82%208l-6%204c-3%203-4%203-9%203l-2%201-3%204c-2%201-3%203-2%203s-1%203-3%203l-1%203c0%203%200%203-1%201s-2-2-3-2l-16%203c-1-2%202-3%208-3l8-2c3-2%203-4%200-3-2%200-5-2-5-4s-4-2-6%200c-2%201-2%202-1%202l-13%202-5%202-5%201c-7%202-8%202-8%204s0%202%2018%201h3l-1%201-12%204-14%204c1%201%209-1%2012-2l2%201c0%201%200%202%202%202%203%200%203%200%202%202-2%202-2%202%200%206l3%206%201%202c0%202%206%207%208%207l23-5a19942%2019942%200%200182-21%20634%20634%200%2000-46-29c-3-2-4-2-10-1m-110%2050c0%209%207%2016%2016%2016%208%200%208-1-3-10-14-11-13-11-13-6'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3018867924528301,"src":"/static/93d0cfb5a7cb2fba0ba4606254ef2a37/dee3b/electric-generator.jpg","srcSet":"/static/93d0cfb5a7cb2fba0ba4606254ef2a37/f81b6/electric-generator.jpg 138w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/cf463/electric-generator.jpg 275w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/dee3b/electric-generator.jpg 550w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/33aa5/electric-generator.jpg 768w","srcWebp":"/static/93d0cfb5a7cb2fba0ba4606254ef2a37/25338/electric-generator.webp","srcSetWebp":"/static/93d0cfb5a7cb2fba0ba4606254ef2a37/c6300/electric-generator.webp 138w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/88818/electric-generator.webp 275w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/25338/electric-generator.webp 550w,\n/static/93d0cfb5a7cb2fba0ba4606254ef2a37/7f8e9/electric-generator.webp 768w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"electric generator"},"fields":{"slug":"/learning-es6-generators-as-iterators/"},"excerpt":"I feel like all the articles in the Learning ES6 series have been leading up to generators. They really are the feature most JavaScript…"}},{"node":{"id":"d6a873b8-9475-5a3d-a0d5-5a097fe2db8d","frontmatter":{"title":"Iterators & iterables","shortDescription":null,"tags":["ecmascript-6","es6","iterables","iterators","javascript","learning-es6"],"date":"December 27, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='312'%20viewBox='0%200%20400%20312'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20156v156h401V0H0v156M168%2036c-6%201-8%203-8%206%201%201%200%207-2%2013-4%2011-4%2014%200%2014%202%200%203-1%204-5l1-5%202%202c4%207%208%209%2011%207%201-1%200-3-3-6l-3-5%204-3c7-4%209-11%205-15-3-3-5-4-11-3m26%203l-9%2015c-5%2010-5%2012-4%2013%202%203%203%202%205-1%201-3%203-4%205-4%206-2%207-1%207%203%200%203%200%204%202%204s3%200%203-2l3-29-8-3-4%204m71-3c-6%201-9%204-8%206%201%201%200%205-2%2012-3%2011-4%2014%200%2015l3-4c2-5%202-5%206%200%207%207%2012%205%206-3l-3-5%205-3c5-4%206-7%206-11-2-6-5-8-13-7M100%2046c-5%2015-6%2021-4%2022h5l4-15%205-14-2-2c-4-2-5-1-8%209m17-9c-4%201-5%202-3%205%202%201%203%202%204%201%202%200%202%200%202%202l-6%2021c0%202%205%205%206%203l4-14c4-13%204-13%208-13%203-1%203-2%202-4%200-2-10-3-17-1m25%200c-3%200-3%201-3%204l-3%2012c-4%2011-4%2012-1%2014%202%202%203%202%208%201%206-1%206-1%206-4%200-2-1-3-5-3h-4l2-3%204-2c3%200%205-1%205-3s-3-4-5-4c-1%201-1%201-1-2%202-4%203-5%207-5s4%200%204-3%200-3-6-3l-8%201m72%200c-4%200-5%202-3%205%201%201%202%202%203%201h3l-3%2010c-3%2012-3%2015%200%2016%202%201%202%200%206-13s5-13%208-14%204-2%203-4-6-3-17-1m23%202c-7%208-11%2023-6%2027%204%205%2010%204%2014-1%203-4%207-14%207-20%200-9-9-12-15-6m51-1c-8%207-9%2013-2%2020%205%205%204%207-2%204-6-4-10-1-5%204%206%205%2015%204%2017-3%201-2%200-3-4-7-5-5-5-7-1-11%203-4%203-3%202%201-2%207%204%2010%206%204s2-10-1-12c-3-3-7-2-10%200m-46%205c-2%203-6%2013-6%2017%200%205%201%205%204%201%205-6%207-24%202-18m-3%2044v5h-71l-2-3c-2-2-2-2-22-4l-22-1%206%2014%205%2012-6%2013-5%2013a366%20366%200%200044-5l2-2h71v11l38-29c1-1-36-30-37-30l-1%206m-111%202l5%2010c5%2012%205%2011%200%2023-4%208-5%2010-3%2010l17-1c14-1%2015-1%2017-4l2-2h77v4l1%203%2013-10%2014-12-27-21-1%203v4h-77l-2-3c-2-2-2-2-14-3a1740%201740%200%2001-22-1m19%2015c-3%203-3%209%200%2012%204%205%2013%203%2014-4%200-2%200-3-4-3s-6%202-2%204c2%201%201%202-2%202-3-1-4-3-4-6%201-3%205-5%206-3h5c0-4-9-5-13-2m21%200c-5%206%200%2016%208%2015%2011-2%2010-17-1-17l-7%202m21%206c0%207%200%208%202%208s2-1%202-5l1-4%203%204c2%204%204%205%206%205s2%200%202-8c0-7%200-8-2-8s-2%201-2%205v5l-4-5c-7-7-8-7-8%203m22%200c0%207%200%208%202%208s2-1%202-5l1-4%203%204c2%204%204%205%206%205s2%200%202-8c0-7%200-8-2-8s-2%201-2%205c0%205-1%205-5-1-5-7-7-6-7%204m24-1l-3%208c0%202%204%201%205%200%200-1%201-2%203-2l3%202%205%201-3-8c-2-6-3-8-5-8s-3%201-5%207m-182%204l32%201%2031-1-31-1-32%201m227%2023l-4%201%201%208%202%2014%201%208h-6c-14%202-17%205-15%2011%203%205%204%206%209%205l9-1h3v11l-3%2029-2%2025c0%207%200%208-3%209-3%202-5%200-7-5v-27c1-27%202-26-7-26-5%200-5%200-7-3-6-11-18-11-29%201-16%2017-19%2056-5%2065%208%205%2019%201%2026-10l4-6%201%205c2%2019%2017%2023%2046%2012%208-3%209-3%206-11-1-6-3-48-2-61l1-8h4c9-1%2019-9%2016-12l-10-2h-8v-27l-3-3c-3-3-10-4-18-2m-190%205l-5%201c-6%201-6%202-5%207l3%2011v7l-8%201-9%202v-6c0-15-18-19-25-6-2%205-2%2013%201%2016%204%205%207%206%2024%207l17%201-2%2042c-2%2038-3%2036%201%2039%202%202%203%202%206%202l18-6-1-5a273%20273%200%2001-2-72l11%202c26%204%2040-2%2040-18%200-6-3-14-5-14l-4%206c-3%2010-4%2010-25%2010-13%200-16-1-16-2%201-4%200-18-1-20-2-3-9-6-13-5m127%2019c-6%203-13%2015-17%2032l-3%209v-7c0-11-5-21-12-25-8-5-22%200-26%209-2%205-1%205%204%205%2013%200%2016%2012%2012%2047-3%2028%200%2033%2018%2032%2010-1%2010-1%207-6-4-8-5-15-3-27%203-26%2012-41%2030-45l6-2v-5c1-13-7-21-16-17m115%2021c-8%202-18%209-23%2019-12%2020-6%2050%2012%2060%2011%206%2029%204%2037-4%205-5%202-13-6-15-2%200-3%200-4%203-2%204-7%207-12%207-6%201-10-4-11-13l-1-4%2016-7c19-10%2022-14%2022-25%200-14-14-24-30-21m-287%207c-8%202-8%202-7%206%202%204%202%2027%201%2049l-1%2016%202%203c3%202%203%202%2011%202l18-4-2-5c-7-10-8-24-4-43%205-25%201-30-18-24m94%200c-9%203-19%2012-24%2023-4%209-5%2027-1%2035%204%2010%2013%2017%2025%2018%2019%201%2035-10%2027-19-4-5-8-5-10-1s-7%207-12%207c-6%201-10-4-11-13l-1-4%2011-2c17-3%2025-9%2027-19%203-16-14-30-31-25m194%2012c-3%203-6%2010-7%2016-1%203-1%203%202%202%209-2%2015-9%2014-17-1-4-5-4-9-1m-188%205c-5%202-10%209-11%2017-1%204%201%204%207%201%207-4%2012-14%208-18h-4m95%203c-7%2010-12%2032-9%2037h4c6-4%2010-16%2010-28-1-11-2-13-5-9'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.2777777777777777,"src":"/static/ea08123ecce544e9b6f6cd2f65308df2/1c1a5/iterators-gonna-iterate.png","srcSet":"/static/ea08123ecce544e9b6f6cd2f65308df2/40683/iterators-gonna-iterate.png 138w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/90683/iterators-gonna-iterate.png 275w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/1c1a5/iterators-gonna-iterate.png 550w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/30492/iterators-gonna-iterate.png 670w","srcWebp":"/static/ea08123ecce544e9b6f6cd2f65308df2/25338/iterators-gonna-iterate.webp","srcSetWebp":"/static/ea08123ecce544e9b6f6cd2f65308df2/c6300/iterators-gonna-iterate.webp 138w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/88818/iterators-gonna-iterate.webp 275w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/25338/iterators-gonna-iterate.webp 550w,\n/static/ea08123ecce544e9b6f6cd2f65308df2/f2e2f/iterators-gonna-iterate.webp 670w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"iterators"},"fields":{"slug":"/learning-es6-iterators-iterables/"},"excerpt":"We’ve talked about the new  operator and new collection APIs, so now we’re finally going to talk about iterators & iterables. We’ve been…"}},{"node":{"id":"3a674055-6418-50a3-b206-389b68ef8c9c","frontmatter":{"title":"New collections","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","map","set","weakmap","weakset"],"date":"December 20, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='318'%20viewBox='0%200%20400%20318'%20preserveAspectRatio='none'%3e%3cpath%20d='M44%202C26%207%2015%2017%206%2033c-9%2017-7%2042%206%2058%201%202%203%204%202%205h2l6%205%206%206%2012%206%202%201%202%201%203%201%203%201-5%202c-41%209-55%2061-24%2088l11%209%201%201c-1%201%205%204%208%204s3%200%202%201c-2%201-2%201%202%202l11%201c4%200%204%200-3%201-37%207-51%2046-25%2072%203%203%206%206%207%205v1l3%202%202%201c-1%201%200%201%202%201l3%202%2015%203c12%200%2022-5%2030-13l5-5%202-3%202-2%206%206%208%207%202%201c0%202%205%204%2010%204l5%201c3%201%2020-1%2024-2l14-15c0-2%204-1%207%202l6%206%203%203c-1%200%207%204%2013%205%208%203%2017%202%2025-2l7-5%202-1%204-4%204-5c1-1%2010%205%209%206h2v1c-3%202%209%206%2020%206%209%200%2019-3%2021-7l1-1%204-4%203-5%203-8%201-3v-3l-1-8-1-4-1-3-3-4-3-4c-2-4-5-7-7-7%200%201-1%201%200%200l-3-1-1-1c1-1-3-4-11-5-10-3-21%200-31%2010l-5%205-1-2c-3-7-18-16-28-18-13-2-30%205-37%2017-2%203-2%203-3%202l-2-2-1-1c-2-4-20-14-30-16-5-1-24%205-21%207v1c-4-2-16%207-16%2011h-2l-1-3-1-1-2-1v-1l-1-2s-3-1-5-4c-5-4-17-11-21-11-2%200-2%200%200-1h4l4-1%204-1%208-4c7-3%2016-11%2021-18l3-5%208%209%2011%208v1c-2%204%2023%207%2037%205l12-3%2014-15c2-4%202-4%208%201l3%204%203%202%204%202%201%201%201%202%203%201c1%202%2012%205%2020%206%2016%201%2034-8%2042-21%202-4%202-4%207%201l5%204v1l1%201c1-1%201-1%200%200l1%201h1l1%201%202%201%206%203%206%202%209%202c7%200%2016-1%2020-4l3-1c2%200%2011-8%2014-11%208-10%2012-25%2010-35-1-7-6-19-8-20-1%200-2-1-1-2h-1l-3-3-2-4-4-3c-7-6-15-9-28-11a47%2047%200%2000-38%2018c-4%205-4%205-4%201h-2v-2l-4-3c-5-5-9-8-11-7-2%200-2%200-1-1%202-1-5-5-15-7h-16c-13%203-23%209-30%2018-3%204-4%205-4%203h-1c0%202%200%202-2-1-4-6-14-12-30-17l-9-3-6%202c-15%204-31%2013-34%2018-2%203-3%204-4%203s-2-2-1-3l-1-1h-1l-3-4-3-3-6-5c-6-5-12-8-19-10l-4-1%208-2c15-4%2028-13%2036-26%204-6%206-7%2010-2%2016%2017%2036%2022%2057%2011%206-2%2016-12%2017-16l2-2%201-1%206%204%207%207c2%200%202%201%201%201h1l2%201v1l2%201%201%201h3c4%203%2013%204%2022%203l7-2%204-2%2010-8%207-7%204%202%205%206%204%202%201%201%205%203h2c8%204%2016%203%2026-1%205-3%2014-10%2014-12s3-1%207%201l2%203h1l1%201%2010%207%2010%201c23%200%2039-21%2032-43%200-3-2-6-2-5l-2-3c0-2%200-3-1-2s-1%201-1-1c-3-9-23-18-34-16-10%202-20%208-18%2012l-1%201c-1-1-2%200-4%201l-2%201-12-12c-15-9-33-7-46%207-5%206-5%206-6%204l-1-2-1-2-4-3c-4-2-7-5-6-5l-15-7-5-1h-6l-6%201c-6%201-14%206-20%2013-6%206-6%206-7%205-1-2-1-2-2-1v-1c0-2%200-2-1-1h-1v-1l-1-1c0-2-7-9-12-12-23-15-46-10-63%2012l-3%202v-1l-1-1-5-7-1-2-1-1v-1l-1-1h-1v-1l-6-4A52%2052%200%200044%202m11%202l3%201c4%200%204%204%200%204-1%201%200%201%204%201l8%202h3l2-1v1c-2%202-1%203%201%202h3v-1c-2-1%200-1%204-1%203%200-9-6-14-7-10-2-14-2-14-1m31%2010c1%201%201%202-1%204v2l2%201-2%201-1%202%201%202h1l1-1v-2l1%201%204%205%204%204h-3c-2%201-1%201%202%201l4-1-1-1v-2l1-1%202%201c0-1-3-4-4-3v-1c1-2-1-4-3-3v-1c1-1%200-2-1-3l-2-1-2-2-3-3v1m6%2022c0%203%203%208%204%207h2c2%201%203%205%202%205-2%200%201%203%203%203%202%201%202%200%202-1v-2c1%200%202%207%201%2012%200%204-1%205-2%204v1l1%204v2l2-15c0-10-2-20-3-18-1%203-4%203-3%200h-3c-3%202-3%202-4%200%200-2-2-3-2-2m-46%209c-4%200-6%203-6%208l1%203c2%200%202%200%202%203-1%203%200%205%203%206l2-2c-2-4-2-9%200-13%202-5%202-6%201-6l-3%201m176%2083c-4%200-2%202%202%201%205%200%207%202%204%205-1%202-1%202%201%202l3-1%201%201c1%202%200%202-4%202-5%200-4%200%203%201l9%201c3%201%207-1%207-2l1-1h1c-1-1%200-2%201-3s1-1%200%200v-1l-1-1-5%201c-1%200-2%200-1%201l-2%201v1c3%203-2%204-6%201-2%200%202-7%204-7l9%202-13-4c-2%200-2%200-1%203%200%202%200%202-1%201l-3-1%201-2%202-2h-5l-7%201m-37%2025v5l-2%202-3%203c-2%202-2%202-2%200v-11l-2%208v1l-5-1c-3%200-4%200-3%202l-2%201h-3l3%202c2%200%202%201%202%202-1%202%200%202%201%202l4-1%203-1%201-2%201%201-2%204-1-1c-2%200-2%201%200%203l1%203c-2%202-3%201-4-1-1-3-5-4-5-2l1%201c2-2%203%202%201%205-3%205-3%2013-1%2012l2%201%203%201%202%201v2c1%202%200%203-1%201-2-1-37%200-40%202-2%201-2%201%200%201l2-1%209-1c9%200%2012%201%2012%206s-6%208-8%204c-2-2-2-2-2%200-1%202-6%203-8%201v-2c2-1%203-1%203%201-1%201%201%202%202%200s-2-4-4-3h-2v-5c-2%200-2%201-2%202%200%202%200%203-4%203l-5-1-1-2-1%202c0%202-2%201-5-2-1-1-2-2-3-1l5%205c6%205%206%206%2011%205l4%201h23c8-1%208-1%2013-6a60%2060%200%200013-17l3-5c3-4%203-5%202-11-1-9-6-22-6-19m-47%205l2%201c2%201%201%203-2%204s-3%201-1%203c1%202%202%202%203-1%202-2%203-3%203-1l3%201h4l-3%201-3%201%203%201%205%201%202%201h7l1-1c2-3%201-4-3-5l-5-1h-5l1-1c2-1%201-1-2-1-2%200-4%200-3%201%202%200%203%202%201%202l-2-1-2-4c-2-2-4-3-4-1m122%202v5c0%203-2%204-2%201-1-2-1-2-1%201%200%204%200%205-1%202l-3-2v1c1%201%201%202-2%204-2%201-3%204-3%205h-3c-3%201-2%202%201%202h5c2%201%204%200%204-1%200-4%206-5%209-2l2%201c0-2%202-1%203%202l1%202v-5c2%201%202%200%202-7%200-4%200-6-1-5l-1%201-1%201-1%202-1-1h-1l-2%203h-1v-3c-1%200-2-1-2-3l-1-4M55%20231l-3%202-1-1c0-2-2-1-4%201l-4%202-3%201-1%201c-1-1-7%203-6%205h-1c-1-1-1-1-1%201h-1l-1%201v1l-1%201%201%201v5l3%202%201%202%201-1v-2c-1-1-2-2-1-3h-1c-1%201-1%200-1-1s0-2%201-1h2v2c3%200%205-3%204-4v-2l1-2v-1l2%202h1c1-3%201-3%202%202%201%201%201%200%201-1%200-7%209-8%209-1l1%202v-1l3-7%202%202%204%201%204%201c0%201%201%202%203%202%203%200%204%201%204%203l1%201h1v2h1a2917%202917%200%20014%205l1%202v1c2%200%202-2%200-5l-2-7v-4l-1%201h-1c1-2%201-2-1-2h-1l-1-2-3-1h-1v-1l-1-1h-2l-4-2-5-2h-5'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.2545454545454546,"src":"/static/ee61c4debabeb34c2a48943ee402f925/dee3b/many-coins.jpg","srcSet":"/static/ee61c4debabeb34c2a48943ee402f925/f81b6/many-coins.jpg 138w,\n/static/ee61c4debabeb34c2a48943ee402f925/cf463/many-coins.jpg 275w,\n/static/ee61c4debabeb34c2a48943ee402f925/dee3b/many-coins.jpg 550w,\n/static/ee61c4debabeb34c2a48943ee402f925/0075a/many-coins.jpg 590w","srcWebp":"/static/ee61c4debabeb34c2a48943ee402f925/25338/many-coins.webp","srcSetWebp":"/static/ee61c4debabeb34c2a48943ee402f925/c6300/many-coins.webp 138w,\n/static/ee61c4debabeb34c2a48943ee402f925/88818/many-coins.webp 275w,\n/static/ee61c4debabeb34c2a48943ee402f925/25338/many-coins.webp 550w,\n/static/ee61c4debabeb34c2a48943ee402f925/d5fa0/many-coins.webp 590w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"A collection of different coins"},"fields":{"slug":"/learning-es6-new-collections/"},"excerpt":"Now that we covered ES6 classes we should be through all of the syntactic sugar that ECMAScript 6 offers. We can now focus on the new…"}},{"node":{"id":"f2e65e45-035c-5125-be2e-3abc37936da1","frontmatter":{"title":"Classes","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","classes"],"date":"December 11, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M195%2044a176%20176%200%2000-2%2016l-1%207%209-2a1045%201045%200%200117-5l-2-2-1-2-2-1h-3l-13-16-2%205m104%204l1%204a3275%203275%200%200127%20132c-1%202%205%203%2016%203%2010%200%2012%201%2011%207l-2%2026a2392%202392%200%2001-6%20129h-11a782%20782%200%2000-51-3%2060920%2060920%200%2000-98-5l10%2012c2%202%204%204%206%204l3%202%203%206c8%2010%2016%2011%2067%2013a1848%201848%200%200195%204c5%201%2010-6%2010-15a435%20435%200%20012-41l1-22%201-27%202-30c1-6%200-28-3-32-4-7-10-14-12-14l-1-1-5-6-5-7-1-1-2-3-2-4-1-7-3-14a470%20470%200%2001-10-48l-2-13-2-9-2-8-2-4c-2-4-4-5-8-7-5-3-6-4-8-8-2-5-4-6-10-10-7-4-10-5-8-3M87%2056c-12%202-24%2013-29%2027-2%206-3%2024-1%2028%203%209%206%2013%2010%2017%209%209%2016%2012%2030%2012%2010%200%2011-1%2016-3%2026-13%2032-51%2013-71-10-9-25-13-39-10m1%2016c-10%204-17%2024-13%2037%204%2012%2018%2019%2029%2014%2014-6%2019-36%208-46-5-6-17-8-24-5m123%2023c-14%204-24%2016-27%2031-1%206-1%2021%201%2024l3%207c4%208%2011%2015%2019%2019%2015%207%2037%202%2048-12%2011-12%2011-37%201-53-6-8-11-12-21-16h-24m6%2015c-15%204-20%2022-11%2040%209%2019%2035%2016%2039-4%203-22-11-40-28-36m-68%2031c-3%202-4%203-7%203s-4%200-4%203c-1%203%200%204%203%204%205%200%206%201%204%206l-1%207-1%206c-1%204%200%206%205%206%202%200%202%200%204-10%201-7%203-11%203-8l1%202-4-21c0-2-1-1-3%202m143%2015l-3%203-5%205c-5%202-4%207%203%207l4%201%201%205c1%207%202%208%206%208s4-1%202-12l-3-14c0-4-1-4-5-3M14%20172c-1%201%200%203%205%2011%203%204%204%205%208%207%204%201%205%202%207%205l6%209c4%204%205%204%2019%206%2011%201%2026%203%2030%205l30%205%2020%203%2011%202c12%201%2018%204%2020%209l7%207c6%204%2011%209%2011%2012l1%204c1%201%202-11%202-20%200-6-1-6-6-5-6%203-12%203-13%202l-2-8-5-25c-1-4-2-5-3-5h-6a672%20672%200%2000-58-10%2010743%2010743%200%2001-84-14m211%2040l-1%206-1%2016-2%2052v8h8l9-1a1094%201094%200%20002-27h11c11%201%2019%200%2024-3%2018-11%2017-39-2-47-5-2-44-5-48-4m16%2018v12l1%208%209%201c11%200%2014-1%2017-5%203-5%202-12-3-15l-10-3c-13-2-13-2-14%202m69%2066c-5%205-6%209%200%209%203%200%204-1%205-3%203-5%208-4%208%202%200%202-3%205-4%203-1-1-4%202-4%204l4%203c4%201%205%204%203%207-2%204-9%202-9-3%200-1-5-3-7-2-4%201-1%209%204%2012%204%202%2011%203%2015%201%206-3%209-12%205-16-2-2-2-2-1-5%205-8-1-16-11-16-3%200-5%201-8%204'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/a6d3446fdd397955b3cde0252342a1eb/f836f/oop-scrabble-tiles.jpg","srcSet":"/static/a6d3446fdd397955b3cde0252342a1eb/f81b6/oop-scrabble-tiles.jpg 138w,\n/static/a6d3446fdd397955b3cde0252342a1eb/f836f/oop-scrabble-tiles.jpg 200w","srcWebp":"/static/a6d3446fdd397955b3cde0252342a1eb/61e93/oop-scrabble-tiles.webp","srcSetWebp":"/static/a6d3446fdd397955b3cde0252342a1eb/c6300/oop-scrabble-tiles.webp 138w,\n/static/a6d3446fdd397955b3cde0252342a1eb/61e93/oop-scrabble-tiles.webp 200w","sizes":"(max-width: 200px) 100vw, 200px"}}},"heroAlt":"O-O-P Scrabble tiles"},"fields":{"slug":"/learning-es6-classes/"},"excerpt":"At the end of our discussion of the new  operator I mentioned that I would next talk about either the new collections or iterators…"}},{"node":{"id":"22873f2c-40c5-5189-8fd2-5a70ed6328e8","frontmatter":{"title":"for-of loop","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","for-of"],"date":"November 30, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='266'%20viewBox='0%200%20400%20266'%20preserveAspectRatio='none'%3e%3cpath%20d='M115%201h-4l-4%201c-1%201%206%203%2010%203%203%200%204%202%201%202l1%201%203%201-3%201-2%201%2019%202%209%201h3l-2%202-2%201h2c6%200%200%202-8%202-25%202-30%205-11%207l10%202%201%205c1%205%203%207%208%208l4%202c0%201%201%202%203%202%206%200%2011%203%2011%206s-1%203-4%204c-4%200-4%202%200%203%203%200%203%200-2%201-12%202-30%202-33%201-4-1-31%202-28%203s2%203%200%203h-5c-5%203-6%203-10%203l-20%206a302%20302%200%200081-10h13c12-1%2018-3%2012-3h-3l51-2c54%200%2072-1%2079-3%203-1%201-2-18-2-24-1-26-1-12-4%207-1%207-1-9-1l-19%201c-4%202-41%202-49%200-6-1-6-1-7-5v-7c2-2%202-3%201-4-4-3%201-10%206-10h5l-4-1-13-2c-14-1-11-2%206-2l14-1c-1-1%207-2%2018-2a1394%201394%200%200036%203c-2%202-4%202-13%202h-11l15%202c17%201%2024%203%2015%203-4%200-3%200%202%201%204%200%207%201%207%202h-41l2%202%202%203%201%201%201-1%2014-1c17%200%2024%201%2024%203-1%201%202%202%2016%202%2015%200%2014%201-2%202l-12%201a1068%201068%200%200058%202l-6%202-4%202c-1%200-2%201-1%202s7%202%2042%202c32%200%2040%200%2038-1l-2-1%202-1c4%200%204-3%201-3l-3-1%203-1c3%200%203-3-1-3h-2l2-1c3-1%204-4%201-4v-1c2%200%203-4%201-4v-1l1-8v-7h-5l2-1c2-1%203-2%203-4s-1-3-2-1l-5%201-7%202-8%202c-6%200-13%201-10%202l3%201h-3l-4%201a121%20121%200%2001-49-2c-4%200-4-4%200-5l4-1h-5l-7-1h-5c-2%200-1-2%201-2l1-1-17-4-7-1-8-1c-13%202-36%202-37%201H115m225%202c-7%202-8%202-5%203%204%200%202%203-1%203-2%200-2%200%200%201h15l13-1h-18l7-1%203-1c-6%200-8-1-8-3%201-2%200-2-6-1M237%204c2%201%200%201-5%201s-8%200-7%201l-22%201h-22a356%20356%200%200040%204l-5%201h6c5%200%205%200%204%201-3%203-1%203%2014%203l18-1%204-2h-10c-7%200-9%200-6-1l1-1c-2%200-1-1%204-3l4-1h-7l3-2c3-1%203-1-3-1h-3c3-1%202-1-4-1-5%200-7%200-4%201M90%2056c-1%201-3%202-10%202-6%200-1%201%2014%201l22-1-6-1c-6%200-6%200-3-1%207-1%205-2-5-2-9%200-11%200-12%202m-68%203L5%2060c-5%200-5%200-5%203%200%202%201%203%202%203v1c-2%200-2%201-2%208v7h4c3%200%204%200%203%201-8%201-7%200-7%2011v10h3l3%201H3c-2%200-3%201-3%202h9l-3%201-5%202-1%2010v10l4%202a822%20822%200%200143%2023l25%2013c3%202%203%202%207%201%206-3%207-2%207%200s0%202-1%201-4%200-4%201c0%202%203%202%208%201l3-2%201-1h6l4%201h31c6%200%208%200%207%201l4%201%205-1%206-2%205-3v-4c-1-1-1-1%201-1l3%201h1l2-2c2-2%200-7-2-7h-5c-4-1-4-4%200-5%203-1%203-6-1-18-3-9-4-10-5-8h-1l1-2v-4c-1-3-1-3-2-2-1%202-5%202-17%202l-16%201%2010-2c14-2%2014-2%202-1l-12%201h-2l-1%201h-1l-1%205a361%20361%200%20007%2036l3%203c0%203-12%206-13%202-1-1%201-5%203-4l1-1a252%20252%200%2000-6-35l-1-5-5%201-7%201-8%201h-6l7-2%2010-2%202-1-3-1h-3c-1-3-28%200-28%202%200%201-5%203-11%204l-11%201H29l4-1%204-1h-8l4-2%208-2%205-1c1-1-1-1-8-1h-9l11-2%2013-4H33l5-1%209-2%2033-7c8-2%209-3%202-3-6%200-6%200-4-1l9-3c13-2%2013-2%2010-3-2-2-25-1-38%200-11%202-15%202-14-1l-2-2c-2-1-3-2-3-4l-4-2-2-1%204-2c3-2%203-2%201-3-2%200-2-1-1-2l-1-4c-1-2%200-2%209-2a335%20335%200%200126-2H50l-15-1%204-1v-1H22m327%201l3%202%204%202c4%201%203%201-6%201-13-1-22%200-22%201l3%201c3%200%203%200%202%201h-6c-6%200-10%201-13%203-4%204-26%205-28%202%200-3-3-1-4%204v3h7c5%200%207%200%206%201h1l3%201v1l-1%201%205%201c12%200%209%202-3%202s-12%200-9%202l11%201a297%20297%200%200114%203c0%201-4%201-9-1l1%202c5%205%206%2011%204%2023a4795%204795%200%2001-11%2048l13%205a285%20285%200%200128%2013%20731%20731%200%200057-22l1%206c0%205%200%206-2%206a568%20568%200%2000-41%2018l12%208%2014%209c2%202%201%203-2%203-2%201-2%202-1%203l3-1c1-1%201-1%202%201l1%202h-2c-2%201-2%202%201%203l5%201h3l-3%201c-3%200-4%201-2%203s1%202-4%202c-6%201-6%202-2%208l4%204h-11c-2-1-2-1-2%201%201%202%200%203-2%201s-5-2-6-1h-2c-2-2-5-1-5%201h-2c-3-3-6-3-6-1s0%202-2%201c-3-3-5-3-5-2%201%203-1%202-3%200-1-2-4-3-6-1l-3-1c-3-1-3-1-4%201%200%202-2%203-2%201-1-2-4-2-6-1-1%201-2%201-4-1s-3-2-4-1c-2%201-5-2-8-9-2-4-4-5-4-2l-1%201-2%204a150%20150%200%2001-7%2015l-5%2011-3%207%202%202c2%202%204%202%2059%202h58l1-2a655%20655%200%2000-1-55V62l-5-1-46-1M138%2077v10c0%201-3%202-10%203-9%200-13%202-15%205-1%203-1%203%202%202%205-1%205-1%204-2-1-2%200-3%2014-4%2011-1%2017-3%2010-3h-4l1-6V70c-2-1-2-1-2%207m-38%2018a240%20240%200%2000-26%207c-3%202%203%202%2018-1a237%20237%200%200114-2l1-6-7%202m176-1c2%201%201%202-1%201h-2c1%201%200%202-1%204l-2%203-6%2014a173%20173%200%2000-15%2034c-1%200-2%203-1%204s1%201%202-1a451%20451%200%200143%209l3%202%202-10%206-26c6-27%205-32-13-33-14-2-16-2-15-1m-57%207l-12%201-11%201%2014%201%2013%201%201-1h16c3%201%203%201-2%201-7%200-7%202%200%202l5%201h-3c-5%200-9%201-7%202h-11c-2-1-18-2-38-2l-8-1%206-1h7l-2-1h-19l2%201%202%202h-3c-2%201-3%201-3%208%200%209%201%2014%206%2028%204%2011%205%2012%209%209%202-1%202-3-1-2l-1-1-2-2%201-1h2l3%201%202-1c-1-2%200-2%207-2h11l1%2012a280%20280%200%2001-3%2047c1%204%200%2015-1%2014l-1%202%201%201c1-1%201%201%201%204%200%205-3%2010-7%2010l-8%204-7%203-3%202c-2%201-2%201-5-1l-14-8-2-3c0-1-1-2-3-2s-10-4-22-12c-6-4-6-4-7%200l2%202c2%200%2014%208%2014%209l-2%203c-1%202-1%202-1%200%200-3-4-4-6-2-1%202-2%202-1-1l-1-1-1-1%202-1%201-1-2-1-3-2c-1-2%200%208%202%2012l1%206%201%203%203%2013%201%203%201-3c-1-5%201-5%205-2%202%202%202%203%202%207l-1%205h6c4%200%205%200%206-2s1-2-3-2c-2%200-3-2-2-5l-1-5v-4l3-4v-4c1-2%200-3-5-5-3-1-3-1-2-2h4a241%20241%200%200121%2012c4%202%205%204%203%208-3%204-4%2013-1%2013%201%200%202-1%202-4l4-9-1%205c-4%209-5%208%2023%208h26v-2c0-2%201-2%203-2%201%200%202%200%202%202%200%203%204%203%204%200l1-2v2c0%201%201%202%203%202s2-2-1-8v-6c-1-2%200-2%206-5%207-3%209-4%208-2%200%202%203%203%204%201%201-1%201-1-1-2-2%200%200-1%208-6%208-4%2011-5%2012-4%201%202-1%204-5%204-1%200-2%201-2%203l-2%202c-4%200-6%201-6%203l-2%202-2%202h-1c-2%200-2%201-2%203l2%204v3c0%204%201%206%207%206%204%200%205%200%206-3%201-2%203-3%205-3%203%200%203-1%207-9a336%20336%200%20017-19c0-2-3-1-5%201h-4c-1-2%200-2%206-5%205-3%207-4%207-7v-2l-3%202-4%203-6%203c-4%202-5%202-7%201l-3-1%201%202c1%201%200%201-4%203a511%20511%200%2000-31%2014l-3-1-4-2c-1-1-2-2-3-1l-1-1v-1l-3-1-5-3-4-1-2-1c-2%200-2%200-2-20a20442%2020442%200%20002-70l33%205c1%200%202-1%206-9l4-12%201-8%201-11%201-6-4-1-9-1h-20M1%20173c0%2029%200%2030%202%2034l3%205%202%204%201%203h6l-2-3c-3-3-3-4%201-4%209%201%201%2011-10%2013l-3%201v40h117v-2c0-3%202-7%205-9%202-1%202-2%200-9s-3-8-4-8-2%200-1-1c0-1-1-2-4-2-4-1-4-1-3-2%202-1%202-2%201-3-1-3-4-3-3%200h-1c-1-1-1-1-2%201-1%203-3%203-3%200%200-2%200-3-2-3s-3%202-2%205l-2%201c-2%200-2%200-1-3%200-2%200-2-2-2l-3%202h-1c-1-1-1-1-1%201%200%201%200%202-2%202l-1%201c2%204%200%205-7%206h-4l4-1c4%200%207-2%205-4s-1-3%202-3c2-1%203-3%201-4h-1l-2%201c-1%201-2%201-1%202l-1%201c-2-1-2-6%200-7%202%200%203-3%202-4-1%200-4%202-7%206l-4%204%201-2v-2l1-2c2-1%203-4%201-4l-2%201h-1l-1%202c1%202%200%202-3%202-5%200-9%202-10%204-1%203-5%206-5%204l6-8c3-4%207-10%206-11l-3%201c-2%201-2%202-1%203v1c-3%200-4%200-5%202-2%201-2%201-2-1l2-3c2-2%202-2%201-3l-2-4%201-3%201-1c2%200%203-3%203-4l-3%202c-4%203-4%203-2-1%200-2%201-3%202-3l1-1c0-2-1-1-9%205-2%202-2%202-2%200l-1-2-3%202-2-1c0-2-4-1-5%201-2%202-5%203-5%202l1-1c2-1%201-3-1-3-3%201-4-1-2-2l1-1%201-1%201-1-2-2h5c2-2%202-2%201-3h-4c-1%200-8%203-9%206h-2a1112%201112%200%200032-21l4-1%2016%209a4610%204610%200%200139%2023l-2-4c0-1-1-2-2-1l-4-2-1-2%203%201%202%201c1%200%200-2-3-5a112%20112%200%2000-38-18l-5-3-2-1c2-1%204%200-21-12L6%20145l-5-2v30m288-3l1%201%201%201-5%201h-6l1%201c3%200%2012%205%2012%207l2%201%201-3%203-1%203-1h4c3%200%203%200%202-1-2-1-2-1%201-1%202%200%203%200%202-1l-1-2c0-2-3-1-6%201-1%202-2%202-3%202l2-2c1-1%200-1-4-1l-7-1c-2-2-3-2-3-1m-126%2020l1%202c1%201%201%201-1%201l-3-1-1-1-2%201%201%201%202%202c-1%203-3%204-4%202l-2-1v3l-2%202-4%202c-8%203-20%205-19%203l-4-1c-4%200-4%200-4%202l1%203%201%201%204%203%204%202c3%200%208%203%208%205%201%202%202%202%206%201l4%201c-2%202%201%203%206%202%205%200%205%200%204%201-2%203%201%206%204%204%204-3%206-2%206%200s4%203%205%200l3-1c2%200%203%200%203-2%201-2%202-2%204-1l3-1c-1-2%204-8%207-8%202%200%205-3%203-4l-3%201h-4c0-1%202-3%205-4l5-3c1%200-3-7-5-7l-1-1c1-1-2-2-3%200-1%201-1%201%201%201%201%200%202%200%201%202%200%202-1%202-2%201-3-1-4-1-2-2%201-1%201-1-2-2-2%200-3-1-2-2l-2-1c-3%201-5%200-2-1l1-2h-3c-2%202-3%2016-1%2016s6%204%206%206c0%203-6%207-10%207-8%200-11-7-5-11%202-2%202-2%202-10l-1-6-1-1-2-2c-1%200-2%200-1-1%200-2-2-3-3-1m74%2015c-1%206-1%206%201%208%203%202%203%208%200%2010s-10%201-13-2l-3-4c0-2%202-5%206-7%203-1%203-1%203-5l-1-3-1%201h-2l-2%201-3%205-3%204-1%203c-2%202-2%204-1%204%202%200%2010%208%2010%209-1%201%201%203%203%203%203%200%204%200%203%202%200%202%201%202%203%201%203-1%202-2-1-3-3-2-3-2%202-1%205%200%205%200%206-3l2-3%201-3%201-2c2%200%204-6%202-7-2%200-1-2%201-2l2-2h-1l-1-1c0-1%201-2%203-1%204%200%204-1-1-3l-4-2c-1-1-5-1-6%201s-3%201-3-1l-2%203'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5,"src":"/static/c9f3b265ea2cacca96ce5e33e1f9f03b/dee3b/merry-go-round.jpg","srcSet":"/static/c9f3b265ea2cacca96ce5e33e1f9f03b/f81b6/merry-go-round.jpg 138w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/cf463/merry-go-round.jpg 275w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/dee3b/merry-go-round.jpg 550w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/c1303/merry-go-round.jpg 825w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/809fc/merry-go-round.jpg 850w","srcWebp":"/static/c9f3b265ea2cacca96ce5e33e1f9f03b/25338/merry-go-round.webp","srcSetWebp":"/static/c9f3b265ea2cacca96ce5e33e1f9f03b/c6300/merry-go-round.webp 138w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/88818/merry-go-round.webp 275w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/25338/merry-go-round.webp 550w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/6d9da/merry-go-round.webp 825w,\n/static/c9f3b265ea2cacca96ce5e33e1f9f03b/5c1d9/merry-go-round.webp 850w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Spinning Merry-go-round"},"fields":{"slug":"/learning-es6-for-of-loop/"},"excerpt":"It’s been a long time… I shouldn’t have left you… without a dope post to step to… It’s been nearly 2 months since I wrote the last article…"}},{"node":{"id":"5b3757f3-cd98-5c20-8395-f95802117157","frontmatter":{"title":"Promises","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","promises","deferreds"],"date":"September 27, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='200'%20viewBox='0%200%20400%20200'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20100v100h59l5-4a372%20372%200%200049-50c13-14%2015-19%2012-30-2-4-2-4-3-2h-1l1-2c1-1%200-4-2-12l-4-11%201-17%202-18c3-2%202-3%200-2-2%200-2%200-2-2v-2l-5-10-2-2-2-7-1-5-1-2-1-2-4-6-4-6-1-4V0H0v100M190%203l1%203%201%201-2%201c-4%200-2%201%204%203l6%204s2%200%205-3l4-4%207%201c9%201%2010%200%2010-5V0h-15c-13%200-16%200-16%202l-2%201-1-1-1-2-1%203m174%201c2%203%203%204%205%204l3%201%203%201%209%203%204%201%204%201%207%204%201-9V0h-38l2%204m-63%2087c-3%203-6%203-9%201-3-3-3-2%200%204%203%207%203%2011%200%2014-3%205-7%204-13-2l-6-5v-3c0-4-1-5-3-3h-1v-2c-1%201-3%200-5-2-3-2-4-2-3%204%200%205%201%207%204%205%202-1%202-1%204%202v4h1l4%202%202%202h-3c-4%200-11-4-11-6l-1-1-2-1-13-8-2%201v1l4%203%205%203%204%204c6%205%2017%2010%2027%2010%207%200%209-1%2012-10l6-10c3-4%204-8%201-9l-2%202m-14%2095l-2%201c-4-1-2%202%204%207l6%205h14c3-2%202-3-4-4-8-2-9-3-9-4l-4-2-4-3h-1'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2,"src":"/static/963f83998f5189be74b2194d7ccaeabf/dee3b/pinky-promise.jpg","srcSet":"/static/963f83998f5189be74b2194d7ccaeabf/f81b6/pinky-promise.jpg 138w,\n/static/963f83998f5189be74b2194d7ccaeabf/cf463/pinky-promise.jpg 275w,\n/static/963f83998f5189be74b2194d7ccaeabf/dee3b/pinky-promise.jpg 550w,\n/static/963f83998f5189be74b2194d7ccaeabf/c1303/pinky-promise.jpg 825w,\n/static/963f83998f5189be74b2194d7ccaeabf/42364/pinky-promise.jpg 1100w,\n/static/963f83998f5189be74b2194d7ccaeabf/a41d1/pinky-promise.jpg 2000w","srcWebp":"/static/963f83998f5189be74b2194d7ccaeabf/25338/pinky-promise.webp","srcSetWebp":"/static/963f83998f5189be74b2194d7ccaeabf/c6300/pinky-promise.webp 138w,\n/static/963f83998f5189be74b2194d7ccaeabf/88818/pinky-promise.webp 275w,\n/static/963f83998f5189be74b2194d7ccaeabf/25338/pinky-promise.webp 550w,\n/static/963f83998f5189be74b2194d7ccaeabf/6d9da/pinky-promise.webp 825w,\n/static/963f83998f5189be74b2194d7ccaeabf/5c86c/pinky-promise.webp 1100w,\n/static/963f83998f5189be74b2194d7ccaeabf/37117/pinky-promise.webp 2000w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Pinky promise fingers"},"fields":{"slug":"/learning-es6-promises/"},"excerpt":"Like clockwork the Learning ES6 series continues on, looking at promises. It will be the first feature we’ve looked at in this series that…"}},{"node":{"id":"1d60952c-0330-52f6-981f-61f8347da856","frontmatter":{"title":"Template literals & tagged templates","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","template-literals","tagged-templates"],"date":"September 17, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='155'%20viewBox='0%200%20400%20155'%20preserveAspectRatio='none'%3e%3cpath%20d='M52%2057l10%2024h29L81%2058l-9-24H43l9%2023m159%200l1%2023h7v-7c0-10%201-10%208%200%205%207%205%207%2010%207h4l-6-9-6-9%204-5%206-7c1-2%201-2-3-2-5%200-5%200-10%206-7%209-7%208-7-7V34h-8v23m104%200v23h8v-7l1-8c1%200%204%203%207%208%205%207%205%207%209%207%205%200%205%200-1-9l-6-9%206-7%205-7h-4c-5%200-5%200-10%206-7%209-7%208-7-7V34h-8v23m-205%201v22h12c16-1%2021-4%2021-14%200-4-3-9-6-9l2-3c2-2%203-4%203-7%200-9-6-12-22-12h-10v23m139-17l-1%204c0%201-1%203-3%203-4%202-4%205%200%206%202%200%202%201%202%2010%200%2013%202%2016%208%2016%204%200%209-2%209-3%200-2-3-4-6-4l-2%201-1-10V54h4c4%200%204%200%204-3s0-3-4-3h-4v-5c0-5%200-5-3-5l-3%203m-130%207v6h6c4%200%205%200%207-2%205-5%201-10-7-10h-6v6m36%201c-4%202-5%203-4%206l3%201c11-3%2013-2%2013%202%200%202-1%203-7%204-9%202-13%205-12%2011%201%207%209%209%2016%205h5l4%202c2%200%202%200%202-11%200-12-1-16-5-19-3-3-10-3-15-1m33%200c-9%205-11%2020-3%2028%205%204%2017%204%2021-1%202-3-2-6-5-4-6%205-12%201-13-7%200-9%204-13%2012-10%203%201%206%200%206-3%200-4-12-6-18-3m104%200c-11%206-11%2024%200%2029%208%205%2023-1%2017-6h-4c-7%204-13%200-13-8s4-12%2012-9c3%201%204%201%205-1s1-3-1-4c-5-3-11-3-16-1m-22%200v31h7V48h-3l-4%201M119%2067v6h5c6%200%2010-2%2011-5%201-5-3-8-11-8h-5v7m139%2044c-7%203-4%2013%203%2014%205%200%208-3%208-7%200-7-6-10-11-7m0%202c-3%202-2%207%200%209%205%205%2013-2%209-9-2-2-7-3-9%200'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.5555555555555554,"src":"/static/ee0b0ae04b8badcf5f7ebf5afef24d86/de22e/backtick.png","srcSet":"/static/ee0b0ae04b8badcf5f7ebf5afef24d86/40683/backtick.png 138w,\n/static/ee0b0ae04b8badcf5f7ebf5afef24d86/90683/backtick.png 275w,\n/static/ee0b0ae04b8badcf5f7ebf5afef24d86/de22e/backtick.png 520w","srcWebp":"/static/ee0b0ae04b8badcf5f7ebf5afef24d86/09a9d/backtick.webp","srcSetWebp":"/static/ee0b0ae04b8badcf5f7ebf5afef24d86/c6300/backtick.webp 138w,\n/static/ee0b0ae04b8badcf5f7ebf5afef24d86/88818/backtick.webp 275w,\n/static/ee0b0ae04b8badcf5f7ebf5afef24d86/09a9d/backtick.webp 520w","sizes":"(max-width: 520px) 100vw, 520px"}}},"heroAlt":"Backtick - powerful commands, just one tick away"},"fields":{"slug":"/learning-es6-template-literals-tagged-templates/"},"excerpt":"Template literals and tagged templates comprise topic #6 in the Learning ES6 series. If you’re new to the series, we most recently covered…"}},{"node":{"id":"edfff363-5bd5-54d8-96ed-b73c612c767e","frontmatter":{"title":"Enhanced object literals","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","object-literals"],"date":"September 13, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='294'%20viewBox='0%200%20400%20294'%20preserveAspectRatio='none'%3e%3cpath%20d='M141%2044c-16%205-26%2016-29%2032l-1%2023c0%2020-1%2025-6%2031-4%204-12%207-19%207h-4v15h6c8%200%2012%201%2016%205%206%206%207%2010%206%2037%200%2027%201%2035%207%2045%209%2012%2020%2016%2048%2016h11v-15l-15-1c-17-1-19-1-25-7-6-7-7-13-7-32%201-33-4-47-18-55-2-1-3-1-2-2%204-1%2011-7%2014-12%206-8%207-15%207-35s1-25%206-31%208-6%2025-7h16V43h-16l-20%201m84%206l1%208h15c17%201%2019%201%2024%207%206%206%206%208%207%2032l1%2023%203%206c3%207%2010%2014%2015%2016%203%202%203%202%200%204-4%202-10%207-13%2012-5%209-5%2012-5%2038%200%2022-1%2024-3%2028-5%2012-9%2014-28%2015l-15%201-1%207v8h16c25-1%2033-4%2041-14s8-15%209-45l1-31c4-9%2010-13%2020-13h7v-15h-7c-18-2-23-11-22-41%201-27-6-41-23-49l-7-3-18-1h-18v7'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3663366336633664,"src":"/static/8be4cb006c190374c78335d2828a8c74/dd5bb/object-literal.png","srcSet":"/static/8be4cb006c190374c78335d2828a8c74/40683/object-literal.png 138w,\n/static/8be4cb006c190374c78335d2828a8c74/90683/object-literal.png 275w,\n/static/8be4cb006c190374c78335d2828a8c74/dd5bb/object-literal.png 320w","srcWebp":"/static/8be4cb006c190374c78335d2828a8c74/8dbf3/object-literal.webp","srcSetWebp":"/static/8be4cb006c190374c78335d2828a8c74/c6300/object-literal.webp 138w,\n/static/8be4cb006c190374c78335d2828a8c74/88818/object-literal.webp 275w,\n/static/8be4cb006c190374c78335d2828a8c74/8dbf3/object-literal.webp 320w","sizes":"(max-width: 320px) 100vw, 320px"}}},"heroAlt":"object literals"},"fields":{"slug":"/learning-es6-enhanced-object-literals/"},"excerpt":"Wow, we’re making some good progress covering ECMAScript 6 features in this Learning ES6 series. We just covered parameter handling, and…"}},{"node":{"id":"ce5cfecb-ccbc-5a27-9384-701a9837539e","frontmatter":{"title":"Parameter handling","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","default-parameters","rest-parameters","rest-operator","spread-operator"],"date":"September 11, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2033c0%2031%200%2034%202%2034v1c-2%200-2%202-2%2021%200%2022%200%2024%204%2020l3-2%203-1%209-4%2016-4c11-3%2031-6%2041-6l7-6c2-3%205-5%206-5l1-1-17-3-8-2-5-2h6a154%20154%200%200130%201l4-2%2010-4%209-2c4-2%207%200%2010%206l4%203h1l4%201a988%20988%200%200129%202l55%204c12%202%2057%204%2070%204l17-2%2025-5%2065-10%201%203v4l-14%202c-26%205-58%2010-90%2013a1094%201094%200%2000-84%2011l-31%204-8%202%203%203a696%20696%200%200013%2012l2-6c1%200%202%203%201%205-2%202%200%202%203-1%204-2%204-3%201-4h2l8-2%207-2c4-1%205-3%203-5-1-1-1-1%201-1l5%201%205%202c1%201%201%201%202-2l1-4%201%202c-1%203%201%209%202%207v-3l3-6%203%202c0%202%200%202%202%201%202-2%204-2%204%200%200%201%202%202%203%200%200-1%200-2-5-4h10l3-1c3%200%203%203-1%204l-3%203c-1%203-1%203%201%206s3%203%205%202c3-1%203-1%203-5-1-4-1-4%201-3%202%200%202%200%201-1-1-4%207-6%2010-4%201%202%201%202-1%204-10%208-12%2015-4%2013%207-2%2013-10%208-11-2-1-1-4%201-4%203%200%207-4%208-7%200-4%205-4%204%200-1%201%200%202%201%202l1-2%202-3c2%200%202%200%201-1v-1a1781%201781%200%200025%200l1%204v2l-3%201c-2%200-4%202-3%203l84-10a1106%201106%200%20003-40V1H0v33m141%2054l7%207v-1l2-1a471%20471%200%200035%202l-13-2a1119%201119%200%2001-31-5m156%2034l6%203%209%204c6%203%2012%2010%2012%2013l-2%205c-2%202-2%202-1%203%201%202%2013%202%2017%201a418%20418%200%200127-8c1-1-3-5-8-7a269%20269%200%2000-60-14m-160%2013l-1%202-1-2c0-2%200-2-1%200l-2%203-1-1v-1l-2%202c-1%201-1%201-1-1s0-2-1-1h-2l-2%201-2%201v-1l-1-1-1%201-7%201h-7c0%202-5%203-9%202-2-2-6-2-11-2l-8-1c-1-2-2-1-2%201v2l-1-1c-1-4-2-8-2-4l-2%203-1%202%202-1c1-1%201%200%201%204l4%202%206-1%202%201v1l2-1h4l8%201%206%201c-1%201%200%201%203%201%201%200%202%200%201-2l1-1%201%204c0%203%200%204%207%205%203%201%205%200%207-1%203-1%206-1%209%201%201%201%205%200%208-1%202-2%205-2%207%200h-2l-4%201c0%202%2010%201%2010-1l1%201c1%202%202%202%203%202h4l2%201%204%201h4c2-2%206-3%208-2%202%202%2011%204%2011%202s-4-4-5-3h-2l-7-2-6-2-5-3-4-2h-1l-2-1-1-2c-2%200-3-2-3-4l3-1%202-1h-2c-1%200-2%200-1-1%202-1%201-2-1-1l-2%201-4%201c-3%200-4%200-3-1h1l3-1c2%200%202-1-2-2-9-2-11-1-10%202m63%2022c-4%201-6%203-3%205v2c-1%201%200%201%202%203l3%203c-1%201%204%203%205%203l4-1c3-1%204-3%202-3l-2-1-1-2-2-1c0-2%203-1%205%202l4%202c2%200%203%201%203%202%200%203%202%202%205%200l2-3-3-1-3-2c-1%201-12-5-14-7s-3-2-7-1m104%2014a57%2057%200%2001-12%2011l-5%202c-2%200-1%202%202%203l4%201c0%202-4%203-6%202-4-3-27%203-30%207l-3%202s-2%201-2%203c-1%202-5%203-9%201-4-3-9-3-12%200l-5%202-7%203-8%203-8%202c-21%207-21%207-26%207h-8l-11%202-14%203c-5%201%2015%201%20126%201h131v-19l-1-23c0-4-1-4-6%200l-6%202-18%207-8%202-4%201-2%202c-6%200-8%201-8%203h-3c-2%200-2%200-1%201%200%202-1%202-4%202l-8%202c-2%201-4%202-5%201v1c1%202%201%202-1%201l-2%201-2%203h-2c0-2-1-2-4-1l-6%202h-3l1-7%201-8v-4c-1-2-2-5-2-12%201-10%200-14-3-12M4%20183H1v42h58a611%20611%200%200054-2l-9-3-7-4-6-2c-3-2-5-2-11-1l-8-1-10-4-6-3-8-3-9-4-10-4-9-3c-7-2-8-3-10-6l-3-3-3%201'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7692307692307692,"src":"/static/8da688367c3936470f5c9fade4da671b/dee3b/spread-butter.jpg","srcSet":"/static/8da688367c3936470f5c9fade4da671b/f81b6/spread-butter.jpg 138w,\n/static/8da688367c3936470f5c9fade4da671b/cf463/spread-butter.jpg 275w,\n/static/8da688367c3936470f5c9fade4da671b/dee3b/spread-butter.jpg 550w,\n/static/8da688367c3936470f5c9fade4da671b/14b42/spread-butter.jpg 800w","srcWebp":"/static/8da688367c3936470f5c9fade4da671b/25338/spread-butter.webp","srcSetWebp":"/static/8da688367c3936470f5c9fade4da671b/c6300/spread-butter.webp 138w,\n/static/8da688367c3936470f5c9fade4da671b/88818/spread-butter.webp 275w,\n/static/8da688367c3936470f5c9fade4da671b/25338/spread-butter.webp 550w,\n/static/8da688367c3936470f5c9fade4da671b/58556/spread-butter.webp 800w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Spreading button on a piece of toast"},"fields":{"slug":"/learning-es6-parameter-handling/"},"excerpt":"This article is all about the new features added to JavaScript via ECMAScript 6 to improve the handling of function parameters. More…"}},{"node":{"id":"f5b803d9-99c3-5244-8e27-ac5f2dd5e51c","frontmatter":{"title":"Speaking at Little Rock Tech Fest 2015!","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","default-parameters","rest-parameters","rest-operator","spread-operator"],"date":"September 2, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='141'%20viewBox='0%200%20400%20141'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2071v70h401V0H0v71M78%207c-2%201-2%203-2%207l1%205h12v-6c0-5-3-10-5-7h-3c-1-1-2-1-3%201M66%2056v16h20v-6H73V42l-4-1h-3v15m25-14l-1%2015v15h7V41h-3l-3%201m11%200l-1%203c0%202%201%202%205%202l5%201v24h7V47h5c4%200%204%200%204-3v-3h-12l-13%201m27%200l-1%203c0%202%201%202%205%202l5%201v24h7V47h5c4%200%204%200%204-3v-3h-12l-13%201m29%2015v15h21v-6h-14V41h-7v16m25-1v16h22v-6h-15v-7h12v-6h-12v-6h14v-5l-11-1h-10v15m38-14l-1%2015v15h7v-5c0-5%200-6%202-6%201%200%203%202%205%206%203%205%203%205%207%205h4l-6-10c-1-2-1-2%201-4%205-5%204-13-3-16h-16m33%202c-12%2010-5%2031%2011%2029%2011-2%2017-15%2012-25-4-7-17-10-23-4m35-1c-7%205-9%2018-2%2025%206%207%2023%206%2020%200-1-2-1-3-7-2-8%200-10-3-10-10%201-7%204-9%2011-9%205%201%205%201%206-2%200-3-1-4-8-4l-10%202m23-1v16l1%2014h6v-6l1-6%209%2010c1%202%209%203%209%201l-10-12-3-3%206-7c7-8%207-8%202-8-3%200-4%201-8%206-6%206-6%206-6%200%200-5%200-5-3-6l-4%201m-54%207c-4%204-3%2014%201%2016%207%204%2013-1%2012-9s-8-12-13-7M149%2091c-10%206-10%2024%200%2028%208%204%2019%202%2017-3%200-3%200-3-4-2-10%203-16-6-11-15%201-4%205-5%2010-3%204%201%204%201%205-2%201-2%201-3-2-4-4-2-11-1-15%201m119%201c-6%205-4%2012%206%2016%209%204%204%209-5%206-2-1-3-1-4%202s0%204%206%205c9%201%2015-2%2015-10%200-4-1-6-8-9-8-4-8-6%200-7%205%200%205%200%206-2%202-5-11-6-16-1M87%2093c0%202%201%203%205%203h4v24h7V96h5c4%200%204%200%204-3v-3H87v3m29%207l1%2015v5h21v-6h-14v-6l6-1c6%200%206%200%206-3%200-2-1-3-7-3s-6%200-6-3c0-2%201-2%207-2h7v-6h-21v10m55%203c0%2016%200%2017%204%2017%203%200%203%200%203-6l1-6%205-1h6v13h7V90h-7v11h-12V90h-7v13m43%202v15h7v-6l1-6%205-1c6%200%206%200%206-2%200-3%200-3-6-3-5%200-6-1-6-3%200-3%200-3%207-3%206%200%207-1%207-3v-3h-21v15m25%200v15h22v-6h-15v-3l1-3%206-1c6%200%206%200%206-3%200-2-1-3-7-3s-6%200-6-3c0-2%200-2%207-2h7v-6h-21v15m50-13c0%203%200%203%204%203l5%201v24h7v-12l1-12%204-1c4%200%204%200%204-3v-2h-25v2'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.816326530612245,"src":"/static/4e7ec377fa161bb8e652e8aecaab211d/1c1a5/little-rock-tech-fest-2015-banner.png","srcSet":"/static/4e7ec377fa161bb8e652e8aecaab211d/40683/little-rock-tech-fest-2015-banner.png 138w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/90683/little-rock-tech-fest-2015-banner.png 275w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/1c1a5/little-rock-tech-fest-2015-banner.png 550w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/6bc03/little-rock-tech-fest-2015-banner.png 825w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/df498/little-rock-tech-fest-2015-banner.png 1100w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/c2dbe/little-rock-tech-fest-2015-banner.png 1640w","srcWebp":"/static/4e7ec377fa161bb8e652e8aecaab211d/25338/little-rock-tech-fest-2015-banner.webp","srcSetWebp":"/static/4e7ec377fa161bb8e652e8aecaab211d/c6300/little-rock-tech-fest-2015-banner.webp 138w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/88818/little-rock-tech-fest-2015-banner.webp 275w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/25338/little-rock-tech-fest-2015-banner.webp 550w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/6d9da/little-rock-tech-fest-2015-banner.webp 825w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/5c86c/little-rock-tech-fest-2015-banner.webp 1100w,\n/static/4e7ec377fa161bb8e652e8aecaab211d/29b60/little-rock-tech-fest-2015-banner.webp 1640w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Little Rock Tech Fest 2015 banner"},"fields":{"slug":"/speaking-at-little-rock-tech-fest-2015/"},"excerpt":"I have been invited to speak at Little Rock Tech Fest 2015 on October 16th! My talk is entitled Sugar & Spice and Everything nice about ES…"}},{"node":{"id":"2f3cc354-c31c-5398-a4b5-d4969fc265de","frontmatter":{"title":"Destructuring","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","destructuring"],"date":"September 2, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M355%2010l-4%2010-8%203c-10%204-16%207-26%2014l-9%206-1%206c2%2010%202%2012%200%2016l-3%203-2-1%201%202c1%200%201%201-1%202l-2%203c1%201%200%206-1%204-1-1%201-12%203-14%202-1%202-2%201-6l-1-2-2%202c0%202-2%203-2%202l-1%202c0%201%200%202-1%201%200-2%203-14%205-16%201-1%201-1-1-1l-3%202-2%202v2l-2%2010-1%208-4-3c-2-1-3-3-2-4a154%20154%200%20005-11c1-2%201-2-2-2-2%200-3%201-4%205l-3%205-1-2c2-3%202-3-2-4l-3%201h-6c-2%201-2%202%200-3%200-2-1-2-3-1l-7%202-4%201h10l-2%202-1%202c4%202-1%202-6%201-6-1-7-2-5-6v-3l-3-3-6-6-4-3-2%202c-3%203-3%203-1%209%201%208%201%208-2%202l-4-4-26%2026a3116%203116%200%2001-46%2046l-6-4c-9-5-9-4-4-10l5-6-8%207-6%207h-5l-12-3c-8-2-26-3-26-1l-1%201-2-1c0-1-4-1-20%203-6%202-11%204-8%204%204%200%202%202-6%206-5%203-12%205-14%205l-4%201%204-2%205-3-14-1-14-1c0-1%207-2%2022-2l17-1c4-2-20-3-44-3l-14%201-1%209c0%206%200%208%201%206%201-3%201-3%201-1%201%201%202%202%203%201h20c17%202%2021%203%2023%206l3%201%202-1v4c1%202-5%203-9%202s-8%200-5%201l1%201c0%202-7%203-21%203-13%200-15%200-15%202l-2%203%201%201%201%205c0%203-1%204-2%204-2%200-3%205-2%2010%201%203%202%205%201%206-2%201-1%202%201%202l10-3c19-7%2035-10%2044-7%205%201%2015%209%2014%2011l1%202%202%201%209%209c2%200%203%202%202%202h-1l-2-1%201%202-1%202c-2%202-3%202-2%200l-2-2c-2%200-2%201-2%202%201%202-1%201-5-3-3-3-3-4-3-7v-4l-1%205c0%209%2014%2022%2023%2022%205%200%205%200%2012-7l8-9c1-2%202-2%207-2%209%200%2020-3%2020-6v-1l1-2c1-2%202-2%207-2%207%200%2011-4%2010-9%200-4%200-4%204-5h3l-4-2-4-2%203-1c2%200%202-1%202-2l1-2%201%201h2c4-4%206%200%202%204l-1%203%202-1%202-2%201-4%201-3v-1c-1-2%200-2%202-2%206-1%207-5%207-12-1-6-3-10-6-10s0-3%2025-30l33-34%206-6h6l20%202c19%201%2021%202%2011%205-5%202-9%203-11%206-4%202-4%203-4%201l-1-2c-2%200-2%201-2%204s0%203-1%202h-4v1c3%200%202%202-1%202-5%201-6%200-5-4l-1-3-2%204c0%204%200%204-3%203l-9%201h-7c0-2-4%203-4%205%200%204%204%204%2023%202l28-3h10v2c0%202-1%203-6%204l-11%205c-3%202-6%202-16%203-11%201-13%201-14%203l-6%203-4%202-1%201-2%201-2%201c-4%201-4%203%200%205h27c27-1%2036-3%2036-6-1-3%201-9%204-11%203-4%2014-11%2018-12l6-10c7-15%2021-32%2030-38%205-3%207-3%204%200s0%203%205%200l6-2v-1l-8-1c-5%200-7%200-6-1l-2-1-4%202c-5%200-3-1%204-4%207-2%2011-3%206%200l-4%202h7c12%201%2013%203%204%207l-7%204-2%201-2%201%207%201%208-1-5%202-12%203c-5%202-8%203-12%207-7%207-7%209%202%206%206-2%2018-3%2016-1l-6%202c-6%201-18%207-19%209h3l10-2c4%200%205%200%203%201l-6%201-4%202h-9v1l-1%201-1%202c0%202%201%202%207%202l7-1-7%203c-6%203-7%204-8%206l-1%204-1%202-2%205-2%202-1-4-2-4v7h-1l-2-5c-3-2-3-2-7-1-8%203-13%2010-12%2015%201%202%201%203-1%203l-1%202c2%202%205%201%207-1l1-2c-5%202-5-5-1-8l4-3c1-1%201-1%203%203%201%203%201%205-1%205l-3%202c-2%202%201%202%204%200%201-2%204-2%204%200s-6%207-11%2010l-7%204c0%201-1%201-4-2l-4-2c-2%201-2%204%200%205s1%203-5%206c-4%202-5%202-6%201-3-4-3-4-4-3v4c1%203%200%206-2%204l-1%201c1%201-8%204-11%203-2%200-2%203%201%205%202%202%208%201%2021-5a744%20744%200%200138-18l41-24c4-2%206-4%2011-10a386%20386%200%200142-47c2-3%202-5%202-23%200-23%200-24-4-24-2%200-4%201-7%205-8%209-17%2018-17%2015l11-15%204-5h-4c-4%200-4%200-8%208a109%20109%200%2001-7%2011c0%202-5%203-9%201l-3-1%203-7c6-11%206-12%202-12-2%200-3%201-6%2010m-13%2016c-6%201-13%204-20%2010-9%205-10%207-10%2013-1%207%201%207%202%200%201-8%205-9%205-2%200%203%200%203%201%201%203-8%2017-19%2025-19l4-1%203%201c4%202%205%201%202-1-5-3-7-4-12-2M43%2047a4802%204802%200%2001-41%207l1%201%201-1%204-1%2016-1a1476%201476%200%200119-5m48%2075c-7%201-9%202-6%203%201%201%202%201%201%202l2%201h3v1l-8%203-9%202h-2c-1%201%200%201%201%201l-1%201c-3%200-4%201-4%203%200%204%204%204%2026%201%201-1%200-1-2-1-4%200-4%200-2-1l8-1h6c-1-1%201-1%204-1l11-1a737%20737%200%200122-6c2-1%203-4%200-6l-12-1a330%20330%200%2001-38%200m84%2019c2%204%201%204-8%202l-18-2c0%202%203%204%2012%206%2014%204%2015%204%2017%201v-8c-3-3-4-2-3%201m-97%203l3%201h-9l-2%202v1l2%201-3%201c-7-2-7-2-7%200s1%203%204%204l6%203%204%202%203%202%206%203c6%202%209%204%206%204-2%201-4%201-8-1l-8-2c-3%200-3%200-1-1v-2l-4%202c-2%202-4%200%2022%2015l7%205%203%201%205%202c2%200%202-3%201-8-1-2-1-2%201-2h2l6-1c9%200%2013-2%209-4-2-1-2-1%200-2s2-1-1-1-10-6-10-10c0-2%200-3%207-3%209%200%2013-1%2014-5s-4-7-9-5h-13a138%20138%200%2000-28-1c2-1%200-2-6-2-3%200-4%200-2%201m270%202a419%20419%200%2001-50%209l-18%204%2010-2a1847%201847%200%200169-11h-11'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7692307692307692,"src":"/static/d303c904829efa076ed9f6844d8b9d75/dee3b/pass-baton.jpg","srcSet":"/static/d303c904829efa076ed9f6844d8b9d75/f81b6/pass-baton.jpg 138w,\n/static/d303c904829efa076ed9f6844d8b9d75/cf463/pass-baton.jpg 275w,\n/static/d303c904829efa076ed9f6844d8b9d75/dee3b/pass-baton.jpg 550w,\n/static/d303c904829efa076ed9f6844d8b9d75/c1303/pass-baton.jpg 825w,\n/static/d303c904829efa076ed9f6844d8b9d75/42364/pass-baton.jpg 1100w,\n/static/d303c904829efa076ed9f6844d8b9d75/37d86/pass-baton.jpg 1500w","srcWebp":"/static/d303c904829efa076ed9f6844d8b9d75/25338/pass-baton.webp","srcSetWebp":"/static/d303c904829efa076ed9f6844d8b9d75/c6300/pass-baton.webp 138w,\n/static/d303c904829efa076ed9f6844d8b9d75/88818/pass-baton.webp 275w,\n/static/d303c904829efa076ed9f6844d8b9d75/25338/pass-baton.webp 550w,\n/static/d303c904829efa076ed9f6844d8b9d75/6d9da/pass-baton.webp 825w,\n/static/d303c904829efa076ed9f6844d8b9d75/5c86c/pass-baton.webp 1100w,\n/static/d303c904829efa076ed9f6844d8b9d75/90fb1/pass-baton.webp 1500w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Passing the baton"},"fields":{"slug":"/learning-es6-destructuring/"},"excerpt":"After learning all about arrow functions and block-level scoping, let’s continue the syntactic sugar train in our Learning ES6 series with…"}},{"node":{"id":"60faee5f-608d-5d46-8961-70067680a951","frontmatter":{"title":"Arrow functions","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","arrow-functions","fat-arrow"],"date":"August 23, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='250'%20viewBox='0%200%20400%20250'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%2015c-2%201-4%203-2%203l1%202c-2%205%200%205%2015%205h15v-3c1-8%200-8-14-8l-15%201M82%2029a1908%201908%200%2000-63%203c-1%202%209%202%20181%201l183%201c2%203%207%20170%205%20173l-96%202a16321%2016321%200%2000-272%204%201839%201839%200%2001-5-177l-1%202-2%202-1%2051c2%20129%202%20125%208%20127a12806%2012806%200%2001272-4c106-1%20101-1%20103-7l-1-43-2-83c-1-48-1-47-5-50l-2-3H263L82%2029m173%2026c-3%203-2%206%203%2025l4%2015h-59a21064%2021064%200%2000-156%202l-1%2025v26h12l86-1c96-2%20118-2%20118-1l-4%2018c-2%209-3%2017-2%2019%201%205%207%205%2013%201a58679%2058679%200%200174-53l16-11-4-3-17-13c-34-22-48-31-61-41-16-11-19-12-22-8m-66%20174v11l2-3c4-5%2011-10%2015-10%205%200%207%201%2013%207l5%204v-20h-35v11'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.6046511627906976,"src":"/static/01cab363f77c686c602488daae83c123/dee3b/sign-arrow-right.jpg","srcSet":"/static/01cab363f77c686c602488daae83c123/f81b6/sign-arrow-right.jpg 138w,\n/static/01cab363f77c686c602488daae83c123/cf463/sign-arrow-right.jpg 275w,\n/static/01cab363f77c686c602488daae83c123/dee3b/sign-arrow-right.jpg 550w,\n/static/01cab363f77c686c602488daae83c123/14b42/sign-arrow-right.jpg 800w","srcWebp":"/static/01cab363f77c686c602488daae83c123/25338/sign-arrow-right.webp","srcSetWebp":"/static/01cab363f77c686c602488daae83c123/c6300/sign-arrow-right.webp 138w,\n/static/01cab363f77c686c602488daae83c123/88818/sign-arrow-right.webp 275w,\n/static/01cab363f77c686c602488daae83c123/25338/sign-arrow-right.webp 550w,\n/static/01cab363f77c686c602488daae83c123/58556/sign-arrow-right.webp 800w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"right arrow sign"},"fields":{"slug":"/learning-es6-arrow-functions/"},"excerpt":"After looking at the history of ECMAScript, the goals of ECMAScript 6 and using ES6 right now, the first actual feature we’ll look at in our…"}},{"node":{"id":"fbc66b0f-cd65-5657-96e7-fe4595f1aa95","frontmatter":{"title":"Using ES6 right now","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","transpilers","babel","traceur"],"date":"August 6, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='182'%20viewBox='0%200%20400%20182'%20preserveAspectRatio='none'%3e%3cpath%20d='M311%2033l1%201-5%201-5%202-3%201h-1c2%201%201%202-4%202l-6-1h-1l-2%201c-5%200-12%203-15%207-5%205-9%2013-9%2016l4-5%204-6%203-3c2-4%206-6%2015-7%209%200%2021-3%2018-3l-2-1h3l8-2c-1-1%201-2%204-2l2-1h-9m-129%207l-2%207-3%2016-2%2013%203-8%202-8%203-1%203-2c1%201%203%200%204-1l7-4c4-2%206-5%202-3-1%200-5%201-7%203l-7%203-3%202c-2%203-2%202%200-7V40m143%201a1527%201527%200%2000-14%2035%2097%2097%200%2000-6%2016l-1%202-1%202-1%202c0%202%200%202%202%201l2-3v-2l1-3%204-9c7-15%2015-38%2015-41h-1M95%2042c-3%200-3%201-9%2015-8%2017-8%2018-8%2020%200%203%200%204%209-17l7-15%2011-1c9%200%2010%200%2012%202l2%201h1l1-1-2-2-3-1c-2-1-15-2-21-1m120%202l-3%204-5%2010c-4%209-5%2013-4%2013l2-2a177%20177%200%200111-23%20322%20322%200%200115-2h-16m70%2027a125%20125%200%2001-17%202l-6%201c-7%201-7%201-12%2014-5%2011-6%2013-4%2013l1-1%205-11c4-11%204-11%208-12l8-1%2013-2c10-1%2013-2%2011-3h-7m-78%209l-9%202c-2%200-16%2027-14%2027l8-12c5-10%206-13%208-13l9-3%2012-2c4%201%204%201%203-1-3-2-9-1-17%202m-34%201l-2%204a630%20630%200%2001-3%2017%20155%20155%200%20019-23c0-2-2-1-4%202m63-1c0%202-4%208-7%2012a130%20130%200%2001-48%2026c-2%200-3%201-6%206-4%207-3%208%202%201l5-5%208-3%209-3c5%200%2030-18%2035-25%203-4%204-11%203-11l-1%202m-85%207c-6%202-6%203-19%2021-9%2013-14%2018-15%2018l-2%202c0%202%200%202%201%201%202-2%202-2%202%200l7-8%2014-19%208-11%207-2%207-3c0-2-4-1-10%201m-62%201l-12%203-8%202-8%2017-8%2018c1%201%201%201%2010-17%205-11%209-16%2010-16l12-3c11-4%2015-5%2019-3%204%201%204%200%200-2-3-1-12-1-15%201m33%204c1%201-7%2011-12%2015a138%20138%200%2001-51%2029l-11%204c-2%200-10%2010-10%2013%200%202%204-3%207-6%201-3%203-4%2011-7a1166%201166%200%200029-12l25-17%209-10%204-5c7-1%209-1%207-4h-2l-1%201-4-2-1%201m235%208c0%201-1%202-3%202l-5%201-8%201c-7%200-13%202-7%202l-4%201a52%2052%200%2000-13%203c-1%201%200%201%202%201a145%20145%200%200031-5c6-1%208-2%208-5v-2l-1%201m-64%203l-6%202-7%201-20%203c-18%202-21%203-21%205l-3%207-2%207%204-6c4-9%201-8%2025-10a65%2065%200%200023-5c4%200%207-1%207-3v-1'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.1904761904761907,"src":"/static/5e61d42f90dec92bff7469af6cfa9d0d/1c1a5/babel-logo.png","srcSet":"/static/5e61d42f90dec92bff7469af6cfa9d0d/40683/babel-logo.png 138w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/90683/babel-logo.png 275w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/1c1a5/babel-logo.png 550w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/6bc03/babel-logo.png 825w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/df498/babel-logo.png 1100w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/1d8ef/babel-logo.png 3276w","srcWebp":"/static/5e61d42f90dec92bff7469af6cfa9d0d/25338/babel-logo.webp","srcSetWebp":"/static/5e61d42f90dec92bff7469af6cfa9d0d/c6300/babel-logo.webp 138w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/88818/babel-logo.webp 275w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/25338/babel-logo.webp 550w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/6d9da/babel-logo.webp 825w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/5c86c/babel-logo.webp 1100w,\n/static/5e61d42f90dec92bff7469af6cfa9d0d/cf7c4/babel-logo.webp 3276w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Babel logo"},"fields":{"slug":"/learning-es6-using-es6-right-now/"},"excerpt":"So can I use ECMAScript 6 functionality right now? That’s the question everyone is asking these days. Many times when there is new browser…"}},{"node":{"id":"63857314-1993-55d0-bf93-cc5e6017dcf6","frontmatter":{"title":"Goals & Features of ECMAScript 6","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6"],"date":"August 1, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='424'%20viewBox='0%200%20400%20424'%20preserveAspectRatio='none'%3e%3cpath%20d='M232%20252c-21%205-31%2023-25%2044%204%2012%2012%2019%2035%2029%2017%208%2022%2013%2017%2022-5%2011-27%2010-37-3l-4-4-20%2011c-1%203%2010%2016%2019%2020%2011%207%2030%208%2044%204%2017-5%2025-16%2025-35s-10-29-40-42c-10-3-15-8-15-13%200-8%204-12%2012-12%205%200%209%202%2013%207l4%204%209-7%2010-6-1-3c-8-14-28-21-46-16M99%20314v62h85v-23h-59v-17h50v-22l-25-1h-25v-39h56v-22H99v62m236-40c-34%2045-38%2055-35%2073%209%2040%2073%2041%2083%202%204-16-2-32-15-41-7-4-19-6-27-3a650%20650%200%200028-38c0-2-3-2-14-2h-14l-6%209m2%2049c-13%204-16%2019-6%2028%204%204%2013%205%2019%202%2011-5%2011-22%200-28-3-2-10-3-13-2'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":0.9452054794520548,"src":"/static/bd119c2ab8f3b23bf9b4f5c923655bbe/97f33/es6-logo.png","srcSet":"/static/bd119c2ab8f3b23bf9b4f5c923655bbe/40683/es6-logo.png 138w,\n/static/bd119c2ab8f3b23bf9b4f5c923655bbe/90683/es6-logo.png 275w,\n/static/bd119c2ab8f3b23bf9b4f5c923655bbe/97f33/es6-logo.png 483w","srcWebp":"/static/bd119c2ab8f3b23bf9b4f5c923655bbe/e4e06/es6-logo.webp","srcSetWebp":"/static/bd119c2ab8f3b23bf9b4f5c923655bbe/c6300/es6-logo.webp 138w,\n/static/bd119c2ab8f3b23bf9b4f5c923655bbe/88818/es6-logo.webp 275w,\n/static/bd119c2ab8f3b23bf9b4f5c923655bbe/e4e06/es6-logo.webp 483w","sizes":"(max-width: 483px) 100vw, 483px"}}},"heroAlt":"ES6 logo"},"fields":{"slug":"/learning-es6-goals-features-ecmascript-6/"},"excerpt":"In this blog post, we’ll take a look at the goals and features of ECMAScript 6. If you haven’t read it already, be sure to check out the…"}},{"node":{"id":"e8200d50-0781-544d-a83a-6bd3d4b187e5","frontmatter":{"title":"History of ECMAScript","shortDescription":null,"tags":["ecmascript-6","es6","javascript","learning-es6","history"],"date":"July 29, 2015","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M303%20179c-33%202-53%2022-53%2052%200%2014%204%2024%2013%2034%207%208%2012%2012%2035%2023%2026%2014%2031%2018%2031%2028%200%2022-30%2026-71%209l-10-4-1%2018%201%2018%208%204c15%205%2023%207%2044%206%2021%200%2029-1%2041-8%2021-11%2031-33%2026-57-5-19-16-29-56-49-19-10-25-17-22-28%204-15%2023-18%2052-7l14%204%2012-31-21-7c-12-4-28-6-43-5m-189%2095v92h107v-33h-67v-47h62v-32h-62v-41h67v-32H114v93'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/bf5110fcdc155bf03a62c7863573ec65/497c6/ecmascript-logo.png","srcSet":"/static/bf5110fcdc155bf03a62c7863573ec65/40683/ecmascript-logo.png 138w,\n/static/bf5110fcdc155bf03a62c7863573ec65/90683/ecmascript-logo.png 275w,\n/static/bf5110fcdc155bf03a62c7863573ec65/497c6/ecmascript-logo.png 400w","srcWebp":"/static/bf5110fcdc155bf03a62c7863573ec65/1f5c5/ecmascript-logo.webp","srcSetWebp":"/static/bf5110fcdc155bf03a62c7863573ec65/c6300/ecmascript-logo.webp 138w,\n/static/bf5110fcdc155bf03a62c7863573ec65/88818/ecmascript-logo.webp 275w,\n/static/bf5110fcdc155bf03a62c7863573ec65/1f5c5/ecmascript-logo.webp 400w","sizes":"(max-width: 400px) 100vw, 400px"}}},"heroAlt":"ECMAScript logo"},"fields":{"slug":"/learning-es6-history-of-ecmascript/"},"excerpt":"ECMAScript 6 is the new version of JavaScript making its way into the interpreters of our modern browsers and servers. I’m embarking on the…"}}]},"site":{"siteMetadata":{"author":{"name":"Ben Ilegbodu"}}}},"pageContext":{"slug":"/learning-es6-block-level-scoping-let-const/","previousSlug":"/learning-es6-classes/","nextSlug":"/learning-es6-12-tricks-for-es6-fun/","category":"Learning ES6"}},"staticQueryHashes":["2495720375","307212292","4260024542","520305385","58428228"]}