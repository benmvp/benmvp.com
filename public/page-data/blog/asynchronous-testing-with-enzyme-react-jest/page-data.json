{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/asynchronous-testing-with-enzyme-react-jest/","result":{"data":{"post":{"html":"<p>Back in April I wrote a blog post about how I would <a href=\"/blog/react-testing-library-over-enzyme/\">choose React Testing Library over Enzyme</a>. It’s probably been my most popular post in the last 3 months! At the end the post, I mentioned that there were many other “nuances about <a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a> that help prevent you from testing implementation details.” I was planning to just leave it at that statement, but recently I ran into one such nuance while working in a codebase that used <a href=\"https://enzymejs.github.io/enzyme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Enzyme</a>. And I just <strong>had</strong> to share it.</p>\n<h2 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p>It has to do with the <strong>complexity around testing asynchronous events</strong> within components using Enzyme. Let’s say for example you had a component that had a form. And <code class=\"language-text\">onSubmit</code> of that form you make an API call to <code class=\"language-text\">POST</code> the form data. And when the successful response returns, you add a new item to a list. It could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">submitNewItem</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevItems</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prevItems<span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>AddForm onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul data<span class=\"token operator\">-</span>testid<span class=\"token operator\">=</span><span class=\"token string\">\"adder-items\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token comment\">// render UI for each item</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>When the <code class=\"language-text\">&lt;AddForm /&gt;</code> submits, it calls <code class=\"language-text\">submitNewItem</code> which is a helper function wrapping <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">fetch</code></a> (or <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a> if you prefer). When we receive the <code class=\"language-text\">newItem</code>, we call <code class=\"language-text\">setItems()</code> with a new array that has the <code class=\"language-text\">newItem</code> appended. By the way, since the new value of <code class=\"language-text\">items</code> is computed using its previous value, we need to <a href=\"https://reactjs.org/docs/hooks-reference.html#functional-updates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pass a function to <code class=\"language-text\">setItems</code></a>.</p>\n<p>So we set up our test like so, but we run into a problem:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Adder <span class=\"token keyword\">from</span> <span class=\"token string\">'./Adder'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> submitNewItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new item is added to the UI when the form is successfully submitted'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Instead of making a real API call, mock the helper to return a</span>\n  <span class=\"token comment\">// resolved promise with the data that would come back from the API</span>\n  submitNewItem<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Gucci sneakers'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Adder <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> preventDefault <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  component\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"addform-form\"]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> preventDefault <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>preventDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  component<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// THIS DOESN'T WORK!!</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"adder-items\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We want to test that the <code class=\"language-text\">newItem</code> was successfully added to state by <em>checking its existence in the UI</em>, <strong>not</strong> by inspecting the value in the component’s state. But this proves difficult because looking at the implementation, it happens asynchronously after <code class=\"language-text\">submitNewItem</code> has resolved its promise. If you debug the test code, you’ll see that the assertion above runs <strong>before the API call even resolves</strong>. Even though we’ve mocked out <code class=\"language-text\">submitNewItem</code> to immediately return a resolved promise, we still don’t have anywhere to “attach” to know when the promise has resolved so that we can safely verify the UI.</p>\n<p>If you Google around, you’ll likely come across <a href=\"https://github.com/enzymejs/enzyme/issues/1587\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this issue in the Enzyme repo</a> that started nearly 2 years ago. And it’s full of crazy workarounds that pretty much all involve testing deep implementation details by reaching into <a href=\"https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/instance.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">component.instance()</code></a>. But that’s not what we want to do!</p>\n<h2 id=\"the-enzyme-solution\" style=\"position:relative;\"><a href=\"#the-enzyme-solution\" aria-label=\"the enzyme solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Enzyme Solution</h2>\n<p>Normally in Jest, we would follow <a href=\"https://jestjs.io/docs/en/asynchronous\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the guide on testing asynchronous code</a>, but in this case it doesn’t work because we don’t have a <code class=\"language-text\">Promise</code> we can “attach” to in order to call <code class=\"language-text\">.then()</code> on.</p>\n<p>But if we think about it, what we really want to do is <strong>wait until all of the promises have cleared</strong>: the <code class=\"language-text\">fetch</code> promise, the following <code class=\"language-text\">.json()</code> promise, and then our promise to call <code class=\"language-text\">setItems</code> with the new data. Once those have all resolved, <em>then</em> we can verify the UI. We need the equivalent of <a href=\"https://jestjs.io/docs/en/jest-object#jestrunalltimers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">jest.runAllTimers()</code></a>, but for promises instead of <code class=\"language-text\">setTimeout</code>, <code class=\"language-text\">setInterval</code>, etc.</p>\n<p>Well it turns out that calling <a href=\"https://nodejs.org/api/timers.html#timers_setimmediate_callback_args\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setImmediate</code></a> will do just that; exhaust all of the promises. But since <code class=\"language-text\">setImmediate</code> uses a callback, we have to use the <a href=\"https://jestjs.io/docs/en/asynchronous#callbacks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">callback form</a> of Jest async testing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new item is added to the UI when the form is successfully submitted'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Instead of making a real API call, mock the helper to return a</span>\n  <span class=\"token comment\">// resolved promise with the data that would come back from the API</span>\n  submitNewItem<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Gucci sneakers'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Adder <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> preventDefault <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  component\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"addform-form\"]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> preventDefault <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>preventDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// within `setImmediate` all of the promises have been exhausted</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    component<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"adder-items\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// have to call `done` here to let Jest know the test is done</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So this is great! We were able to successfully test our code! But I personally don’t like using the callback form of Jest async testing. I prefer using the <a href=\"https://jestjs.io/docs/en/asynchronous#asyncawait\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> form</a>. Well, it turns out that we can turn this <code class=\"language-text\">setImmediate</code> pattern into a Promise-based helper called <code class=\"language-text\">runAllPromises</code> that will then allow us to use <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runAllPromises</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new item is added to the UI when the form is successfully submitted'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Instead of making a real API call, mock the helper to return a</span>\n  <span class=\"token comment\">// resolved promise with the data that would come back from the API</span>\n  submitNewItem<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Gucci sneakers'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Adder <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> preventDefault <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  component\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"addform-form\"]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> preventDefault <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>preventDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> <span class=\"token function\">runAllPromises</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// after waiting for all the promises to be exhausted</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// we can do our UI check</span></span><span class=\"gatsby-highlight-code-line\">  component<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"adder-items\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Wow! 🎉</p>\n<p>There’s a lot of shorthand going on with <code class=\"language-text\">runAllPromises</code>. The fully written out version would be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runAllPromises</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We return a <code class=\"language-text\">Promise</code> that is resolved, when the <code class=\"language-text\">setImmediate</code> callback is called.</p>\n<h2 id=\"the-react-testing-library-solution\" style=\"position:relative;\"><a href=\"#the-react-testing-library-solution\" aria-label=\"the react testing library solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The React Testing Library solution</h2>\n<p>As I mentioned in my previous article, React Testing Library is all about testing the UI from the user’s experience. Our users aren’t submitting the form and then waiting for promises to resolve. No, <strong>they are waiting for the UI to update</strong>! Even though we avoided using <code class=\"language-text\">component.instance()</code> with the Enzyme-based test, we’re still kind of testing implementation details knowing that we have to <code class=\"language-text\">runAllPromises.</code></p>\n<p>To promote user-centric testing, React Testing Library has <a href=\"https://testing-library.com/docs/dom-testing-library/api-async\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">async utilities</a> that mimic the user behavior of waiting. Specifically, there is a <code class=\"language-text\">waitFor()</code> method that allows you to <em>wait</em> until the UI is ready. Using <code class=\"language-text\">waitFor</code>, our Enzyme test would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Adder <span class=\"token keyword\">from</span> <span class=\"token string\">'./Adder'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> submitNewItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> waitFor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../testUtils'</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// test is now `async`</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new item is added to the UI when the form is successfully submitted'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  submitNewItem<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Gucci sneakers'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Adder <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> preventDefault <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  component\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"addform-form\"]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> preventDefault <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>preventDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// we wait for the assertion to pass</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> <span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    component<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"adder-items\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// more assertions here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">waitFor()</code> helper uses polling to wait until the callback function you pass to it is successful.</p>\n<p>Before I stumbled across <code class=\"language-text\">runAllPromises</code>, I actually wrote an equivalent <code class=\"language-text\">waitFor()</code> that I could use with Enzyme:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">waitFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> interval <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nextInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime <span class=\"token operator\">></span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Timed out.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">nextInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">nextInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The way this works is that the Jest assertions, like <code class=\"language-text\">.toHaveLength()</code>, will throw an <code class=\"language-text\">Error</code> when they fail. So <code class=\"language-text\">waitFor()</code> is continuing to poll as long as the <code class=\"language-text\">callback()</code> is throwing an error (i.e. the item has not yet been rendered). Once the assertion stops throwing an error, it was successful, so <code class=\"language-text\">waitFor()</code> resolves the promise, and test execution can continue on.</p>\n<p>By using <code class=\"language-text\">await</code>, we wait on that promise to resolve and we’ve waited just like our users would wait. And if the assertion continues to fail, we’ll eventually hit our timeout and the promise will be rejected. And the rejected promise will throw an <code class=\"language-text\">Error</code>, so the test case will fail just like other failed assertions.</p>\n<p>After writing <code class=\"language-text\">waitFor</code>, I went into the <a href=\"https://github.com/testing-library/dom-testing-library/blob/aa7ed18486c3ab92141d54819eb7f213ddc6efb4/src/wait-for.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> to see how it was implemented in React Testing Library and its surprisingly different. Outside of the additional functionality it provides, they used a <code class=\"language-text\">setInterval</code> instead of successive <code class=\"language-text\">setTimeout</code> statements like I did. I went with the <code class=\"language-text\">setTimeout</code> route because I felt it was easier to manage the final timeout that way, but I wonder if there’s an override in making lots of <code class=\"language-text\">setTimeout</code> calls? It proves that <strong>there’s never a single “right way.”</strong></p>\n<p>One final note, in React Testing Library the <a href=\"https://testing-library.com/docs/dom-testing-library/api-queries#findby\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">findBy*</code></a> queries return a promise which resolves when an element is found that matches the given query. <strong>The <code class=\"language-text\">findBy</code> query is basically a convenience wrapper around <a href=\"https://testing-library.com/docs/api-async#waitfor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">waitFor</code></a></strong>. In Enzyme we could similarly create a wrapper over our <code class=\"language-text\">waitFor</code> implementation, but I still feel that <code class=\"language-text\">runAllPromises</code> solution is probably simpler, and obviously less code.</p>\n<hr>\n<p>As I’ve mentioned many times before, I really prefer React Testing Library’s approach to “user-based” testing. But at least now when I have to work in Enzyme environments have a couple of tools that I can use to solve this async testing problem. But even still, this is yet another reason why I suggest you go with React Testing Library over Enzyme. 🙃</p>\n<p>Keep learning my friends. 🤓</p>","excerpt":"Back in April I wrote a blog post about how I would choose React Testing Library over Enzyme. It’s probably been my most popular post in the…","timeToRead":8,"wordCount":{"words":1014},"fields":{"slug":"/asynchronous-testing-with-enzyme-react-jest/"},"frontmatter":{"title":"Asynchronous testing with Enzyme & React in Jest","shortDescription":"How to use Enzyme to test UI updates after asynchronous events in React components","tags":["react","async","enzyme","react-testing-library"],"category":"Testing","date":"July 15, 2020","dateIso":"2020-07-15"}},"categoryPosts":{"edges":[{"node":{"id":"774a4f93-02fe-5e82-9e88-8a110c79de67","frontmatter":{"title":"Mocking window.location methods in Jest & jsdom","shortDescription":"A way to successfully mock the locked Location object from jsdom in Jest","tags":["mock","react"],"date":"August 6, 2020","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='199'%20viewBox='0%200%20400%20199'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20100v99h401V99c0-55-1-70-1-34v65l-12-1-13-1-15-2-30-3-47-5a439%20439%200%2001-75-11l-1-3c-1%200-1-6%201-17v-6a1694%201694%200%2001-2-52l-1-29h-4c-4%200-4%200-4%204l-1%204-1-4-1-4-1%203c0%207-1%2011-3%2011-2%201-3-1-3-4%200-2%200-2-1-1v17c1%203%203%202%202%200l2-4c2-2%202-2%203%200v12l3%203c2-1%202%201%203%2015%200%2014-1%2016-3%2011l-10-15-7-6-7-7V0h-56l1%204c0%205%200%205-3%205-2%200-3-1-2-3l2-5c1-1-2-1-18-1H77l-1%204a287%20287%200%2001-4%2014V0h-3l-4%203c-1%201-1%201-1-1l-2-2-1%201v3l-1-2c0-1-1-2-5-2l-6%201h-1c-1-1-1%200-1%202v4l2-2c2-2%204-3%204%200l-2%207c0%205%200%205%201%204%204-3%204%204%201%207s-4%202-2-1c1-2%201-3-1-5l-5-2c-2%200-2-1-1-4%201-2%201-2-1-2V8c2-1%203-2%203-5%200-4-2-4-3%200%200%202%200%203-1%202s-1-1-1%201h-1l-2-1%201%202c1%201%201%201-2%201l-5%201-3%201%203%203c1%201%202%202%201%204l-1-1h-1c-1%201%201%205%202%205%202%200%203-6%202-8l1-2h2a167%20167%200%20011%203c2%200%206%205%207%2010l2%204%202-1v1l1%203c2%201%200%204-2%204v1c0%202%200%202-1%201-2%200-3%202-1%204l1%201c0%202-5%202-7%201-2-2-2-6%201-5l3-4c1-5%201-6-2-6l-1-1%202-2v-2l-2-2-2-3c-2-2-2-2-2%202-1%206-2%206-4%204-2-1-4-1-4%202%200%202-2%205-4%205s-3-2-1-4v-5l1-2%201%202c1%204%202%202%202-4%200-5-1-5-3-5-1%201-2%200-2-1l2-2c2%200%203-2%203-4s-3-1-4%201c0%203-2%202-1-1l1-2c2%200%203-3%202-4l-2%201h-4L11%200H0v100M61%205l-2%208-1%2015-1%204%201%202%202-3c0-2%201-3%202-3%202%200%203-3%202-11%200-2%200-3%201-2l1-4c0-5-3-8-5-6m41%2026l-4%203c-6%202-10%205-13%2010l-6%206c-8%2010-12%2038-6%2056%204%2015%2018%2033%2031%2041%2011%207%2031%2012%2031%208l-5-1-6-1-6-2c-4-1-9-5-9-8%200-6-1-7-4-9-2-2-2-3-1-3h2l2-7%202-7v-1l-1-1-14%207h-2v-3l4-3%204-2%202%201-1-2c-1%200-1-1%201-2%202-2%203-1%201%201h2c2-1%203-3%201-3l-2-1c-1-2-9-3-15-1-6%201-5-1%200-3%2015-4%2015-6%203-10-9-4-8-4-8%201v4-11l1-3v2l1%203c3-1%208%200%208%201l5%202%207%201c3%200%202-1-1-3-2%200-3-1-3-2%201%200-2-4-6-7l-7-7h2c3%203%2018%208%2017%206a585%20585%200%2000-3-10c1%202%201%202%202%201h1v1c-1%201-1%202%201%204l4%202-2-3-2-2h2l-1-3c-1-2-1-2%201-6l1-8c-2%200-1-4%201-5l2-2v-2l-1-1-1%201c0%203-3%205-4%202%200-1-1-2-3-1-2%200-3%200-4-2-3-3-3-4-8-1-4%201-5%203-3%203l1%201%202%202c1%201%201%203-2%203L82%2066c-1%201-1%201-1-1l4-5c2-3%202-3%201-5s1-6%203-5l1-1c-1-2%206-8%2015-13l7-5c0-2-7-1-10%200m30%2020c0%205%203%209%2010%2012s9%205%205%204c-1%200-2%200-3%202l-2%207c-2%205-2%206-1%207h1l6-3c10-4%2012-6%206-12l-2-3-2-1c-2%201-7-3-5-4%203-2%200-5-4-6l-4-1h-2l-1-1c1-1%200-2-1-2l-1%201m60%2016l2%206c5%2012%206%2027%203%2041l-2%2010-1%202-3%205-6%208c-3%204-3%206%200%203%204-3%2011-15%2013-20%206-17%205-35-2-50-3-6-4-7-4-5m-38%2014l-3%201-4%202c-4%203-5%203-6%202-1-2-2-2-4%200l-1%203%201%205%201%207c1%200%204-6%204-9l1-2h3l8%201c9%200%209%200%208-4%200-2-1-2-4-2l-3%201%202-2c3-1%203-1%202-4s-2-3-5%201m1%2014c-4%201-7%203-7%204s12%206%2015%206c2%200%203-4%201-6v-1l-1-5-8%202m-12%205l-2%202v5c0%201%202%200%201-1%200-1%201-2%203-1l3%202c-1%201-1%202%207%208%206%206%208%207%208%205v-1c1%202%203%200%202-2%200-2%200-2-1%200-1%201-1%200-1-2l1-5c0-2%200-3-4-3-3%200-4%200-3-1s0-1-3-2l-9-1%201-1%201-1c0-2-1-2-4-1m0%2015c-1%200%205%2013%208%2017v1l-5-6-3-5c-3-4-5-5-3-1%203%205%204%209%203%2012l-2%204-1%205v8h1l1-1%205-1c7-3%207-4%205-6l-2-2%203-3%205-4%203-2%201-2-2-8-8-3c-4-2-8-4-9-3m-19%2018l-1%205%202%201c2%201%202%201-1%201-5%200-6%201-4%205v3c-1%202%201%203%208%203s7%200%204-7l-3-4c-1%201-1%201-1-1%201-1-2-10-3-10l-1%204'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2,"src":"/static/ca02afae964ec416d64f0da2fec8aa8b/dee3b/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg","srcSet":"/static/ca02afae964ec416d64f0da2fec8aa8b/f81b6/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 138w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/cf463/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 275w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/dee3b/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 550w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/c1303/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 825w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/42364/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 1100w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/947df/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.jpg 5472w","srcWebp":"/static/ca02afae964ec416d64f0da2fec8aa8b/25338/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp","srcSetWebp":"/static/ca02afae964ec416d64f0da2fec8aa8b/c6300/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 138w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/88818/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 275w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/25338/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 550w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/6d9da/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 825w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/5c86c/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 1100w,\n/static/ca02afae964ec416d64f0da2fec8aa8b/f8fd9/compass-jordan-madrid-iDzKdNI7Qgc-unsplash.webp 5472w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Compass on a window sill"},"fields":{"slug":"/mocking-window-location-methods-jest-jsdom/"},"excerpt":"Well it looks like I’m going to continue my streak about sharing helpful tips around JavaScript testing in Jest. Previously I shared about…"}},{"node":{"id":"50cc6858-db34-5dd3-a35e-0d2cb24388dd","frontmatter":{"title":"A quick trick for Jest asynchronous tests","shortDescription":"A small configuration you can add to Jest to reduce false positives for async tests","tags":["async","await","promises"],"date":"July 29, 2020","hero":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='189'%20viewBox='0%200%20400%20189'%20preserveAspectRatio='none'%3e%3cpath%20d='M115%201v2l-1%203c-3%202-2%203%200%203h2l2%202%202%201%206%203%205%201-3%202a827%20827%200%2001-13%209%203573%203573%200%200144-27l-5%201h-2c-2-1-12-1-15%201l-2-1-10-1-10%201m134%200l1%201h6l32%201c0-2-5-3-22-3l-17%201m81%202c1%202%202%203%203%202l1%201%202%201%201%201%201%201h1l-1%201v3h1l1-2v2l-1%202-1%202h2l2-1-2%202c-3%201-3%209%200%2018a3222%203222%200%200120%2062l30-4c9-1%2010-1%2010%201%201%201%201-4%201-11l-1-9-1%205v5c2%200%201%206-1%206-1%201-1%200-2-2l-2-3-1-1c0-2-8-13-10-14l-2-1%208-5%204-2c4-3%207-4%207-1%201%201%201-2%201-6l-1-9v-2l1-13c0-10-1-13-2-13l-2-1%201-1c3%200%204-8%202-17h-17v4c-1-1-1-1-1%201v1h-1c0%201-2%200-5-3l-3-3h-21l-1%204v12l-1%207v1c0%203%200%205-2%206-2%204-2%204-4-1-1-3-1-4%202-6%203-3%203-3%203-10l1-10c1-3%201-3-1-3l-2%202c-1%201-5%202-5%200l-2-2c-2%200-3%201-2%202h-1l-3%201c-1%201-1%201-2-1-2-3-3-2-2%201m24-1l1%201%201%201-2%201-2%201c0%202%200%202%202%202%201-1%202-1%201%201v5l-1%204h-1l2%201%201%203-1-1c-3-2-3-1-2%204l3%203%203%202c1%203%201%203-1%203l-1%201%201%201v1l1%201h3l-1%201-1%201%201%201h3l-1%201-2%201%202%201%202%201h2l1-3h-3l2-1v-3c-1-2-1-2-3-1l-2%201%201-2c2%200%201-2-1-2v-1c3%200%202-4-1-3-2%200-3-1%200-2%202-2%200-6-3-6v-1c4-1%203-4%200-3-2%200-2%200%200-2v-2l-1-1h2l1-2c0-1%200-2-1-1l-2-1h1l1-1c0-1%200-2%201-1%202%201%201-1-1-3s-5-3-5-1M13%204L1%205v5c0%206%200%206%205%200l5-5-4%207-6%207v14c0%2014%200%2016%205%2015l1%201c-1%201%200%203%202%205l5%209-6-7-7-6v7l1%207%201%201-1%201-2%202%201%202v15l1%2016c2%201%203%200%201-2-1-1-1-1%201-1%201%200%202%201%202%203l-1%202c-2-2-1%201%202%204%204%203%205%204%204%202%200-1%200-2%202-1l2%202h-2c-1%200%200%202%203%204s4%204%203%204c-1%201-9-5-15-11l-4-5v4c0%203%200%204%202%204%201-1%201-1%200%200l-1%203c-1%205-1%206%201%206h3c1%202%201%202-2%201H0v5c0%204%200%205%202%205l2%202H0l1%201v2l-1%2010v9l21-1%2028-1h6v-8l1-21c-1-4-2%208-2%2017v11H32l-6%201v-3l1-4c1-1%200-3-2-5l-2-5-1-2h-1l-4%206-2%206v3c-1%201-1%201-1-1s0-2-3%201l-4%204a404%20404%200%200015-25c8-11%2016-21%2017-19%200%202%203%201%204-1s1-2-1-2h-1c2-2%202-2-1-6-2-3-7-7-7-5l-1%201-1%201-2%202h-1c1%200%200%202-2%203-3%204-6%203-7-3%200-3%200-3%201-2h1a28%2028%200%20011-5c0-1%201-2%203-2%203%200%204-1%202-2l4-6%206-4v-1l5-6%205-6c0-1%206%202%207%204h3v2h-1l-1%202-4%204-4%202c-2%201%205%201%209-1l3-2V60a904%20904%200%20014-54c0-3%200-3-2-3s-2%200-1%201v14c-2-1-2-6-1-7V6l-1-3H41L13%204m17%201c-5%200-5%200-7%205l-7%209c-4%205-4%206-1%206s14%207%2014%209l2%202%201%201-1%201-2%201%203%201%204-1c1%200%201-1-1-1v-3l2-2%202-1c2%200%202%200%201%201-2%201-2%201%200%201h3c1-1%201-2-2-3l-3-1%202-3c5-6%207-16%203-14l-2-1c0-2%201-2%202-2%203%201%204-2%202-4-1-1-7-2-15-1m175%203l2%201c-1%202-5%202-5%201h-1v7l4%202c2%200%202%200%201-1v-2c3%200%205%201%203%202-1%201-1%201%201%201s5-2%205-4c1-4%200-5-3-4-3%200-3%200-3-2%201-2%200-2-2-2s-3%200-2%201M86%2011a780%20780%200%20000%2021c1%200%203-1%203-3l1-2%202%202c2%203%208%203%2011%200s2-7-3-8l-2-1%203-1%204-2v-1c-2-3-3-2-6%201-3%202-3%202-3%200%202-3-1-6-6-6h-4m82%209c-6%204-10%207-7%206%201-1%203%201%206%203%205%205%206%205%201%200l-3-5%201%201%206%201h5v-4c0-3-2-6-3-5l-6%203M53%2022c-1%202-2%203-2%207%200%205%201%205%202%201%201-3%201-3%201%200l-2%207c-1%205-1%206%201%207%202%202%202%202%203%200l1-8V25c-1-6-1-6-4-3m213%206a45%2045%200%2000-23%2022l-4-2c-13-8-26%208-18%2023%203%205%203%207%200%207-4%201-5%204-2%206%204%203%2010%202%209-2-1-1%200-3%201-4l1-9c0-7%201-10%204-10%202-1%202-1%200-1l-4%201c-1%202-2-1-2-6%201-5%203-6%207-5s10%206%2010%207c0%202-5%206-5%205l-3-1%201%202%202%204%201%205c0%204%200%204-3%204-5%201-6%203-2%207%203%204%206%205%203%201-2-1-2-2-2-3%201-1%205%205%205%208-1%202%201%205%203%205%201%200%202%202%202%205l1%206c1%202-7%205-14%205l-6%201c0%203%205%205%2012%205%204%200%204%200%203%202l-1%202%202-2%202-1-2%204c-3%205-3%207-1%2011%203%204%203%204%207-2l10-11c1%200%202%201%202%203l13%2016c2%200%202-14%200-20l3%201%2020%208c0-1-2-4-6-7-5-6-5-6-2-5l14-3%202%201%202-1h4l3-1c1-2%201-2-2-2-3%201-4-3-1-4%202%200%202%200%201%202-1%201-1%201%201%201h2l1%201v-3c-1-3-7-3-8%200s-9%203-20%202c-11-2-11-1-10-8%200-4%201-5%202-5s3-1%204-4l5-6c4-5%202-10-4-7-2%201-2%201-2-1%203-7%203-16%201-17-3-2-3-1-2%201%203%203%202%2012-1%2010-1-2-1-4%201-4v-2h-2c-2%202-3%201-1-1s0-3-2%200h-24c-3%201-4%200%200-1%202-1%203-5%201-5l-1%202v1l-1-1-1-1-1%202c1%201%201%201-1%201-1-1-2-1-1%201l1%202-1%202-1%202v2l-1%204c1%202%201%202%202%200%202-5%203-5%207%200%205%205%205%203%201-3-3-3-4-4-6-4-3%201-3%200%201-1%205-3%208-3%208-1%200%206%204%206%205%201%200-2%201-2%204-2%207%200%2012%206%2014%2013l1%203-1%205c-2%204-2%206%200%203l4-5c2-2%202-3%200-4-1-1-1-1%201-1%203%200%203%203-1%208-2%202-4%204-6%204s-3%200-3%206c-2%207-5%2012-8%2013l-3%202c-1%202-6%201-8-1l-4-2c-3-1-6-6-6-12-1-7-2-8-4-7l-2-1v-4c-1-1-2-3-1-4l-3-2c-2%200-2-1-1-1l4%201c2%201%202%201%202-1l2-5c2-4%201-5-1-2s-3%203-3-2c-2-11%2017-19%2032-13h4c0-2%207-9%209-9%203%200%204%208%202%209l-2%202h2c1-2%201-2%204%205l4%2010c2%203%203%204%202%205-2%201%200%205%203%206%203%200%207-3%206-5-1-3-3-2-2%200%200%201%200%202-1%201-1-2-2-1-1%201%200%202-1%203-3%201-1-2%200-5%203-5v-1l1-8c2-11-1-18-10-22-5-2-8-2-13%202l-3%201-1%203c-1%202-1%202-11%200-3%200-5-5-5-11%200-7%205-11%2010-9%203%200%205%202%203%202v1l2%203c-1%201%200%201%201%201l3%202%201%202c2%200%201-3-1-4l-2-4c0-4-8-7-13-5M98%2039c-2%205-6%208-10%208s-4%200-4%203c0%202%201%203%202%201s8-3%208-1l-7%203v3h3c2-3%2013-9%2015-9%202%201%202-1%201-3-2-1-2-1-4%201-4%203-7%203-4-1l3-2c2%201%202-1%200-3s-2-2-3%200m258%2011h-2c-1-2-3%200-2%203%201%202%201%202-2%201-2-1-2-1%200%206l1%205%203-3c2-2%203-3%204-2l2%201V48c0-1-3%200-4%202m5%2013l-1%201h-2c0%201%203%204%206%204%203%201%204%204%201%205-1%200-2%201-2%203l-1%202-2-1h1v-3h-1c0%202%200%202-2%201-3-1-3-2-1-3%201-1%201-1-1-1-3%200-3%202%201%2015l4%2011%205-1h7c2-1%201-7-1-11s-2-4%200-6l2-1%201-1c0-2-9-11-11-11v-1l1-2h-4M118%2076c-6%203-11%2020-9%2028l1%205-5%201c-12%200-16%208-10%2021l9%209c7%204%207%204%206%206-4%203-2%207%203%207%202%200%203%200%202-1l-1-2-1-2-1%202-1%202c-2-2-1-5%201-6%204%200%205%201%205%204v2c2-1%202-5%201-6l-2-3c0-3-5-11-8-13-2-3-3-5-1-7v-1l-2%202c0%203-1%202-4-1-6-8-2-14%2010-11%205%201%205%201%205%204l-1%204-4%201c-3%200-3%200%200%201%201%200%204%201%205%203%204%202%205%202%203-1-6-6%202-21%2014-25%205-2%2017-3%2019-1l6%209c-1%201-6-2-5-3%201-2%200-5-2-4l-1%203c1%202%200%202-3%202-6%200-20%208-20%2011l3-1%203-3%201%203c2%202%204%203%206%201v-3c-4-3%200-6%207-6%205%200%209%202%2013%206%203%202%203%202%204%201h1l3%2011c1-1%200-11-1-13-1-1-1-1%201-1%202%201%203%2015%200%2014-3%200-2%201%201%208s4%2013%202%2015l-2%203c0%203-2%204-9%204-8-1-10-2-18-9l-5-4-3%202v-1l-1-2v1c0%201-3%201-7-2h3c3%201%204%200%201-1l-2-2-3-1c-2%200-2%200-1-1h3c2%200%202%200%201-2-2-4-3-10-2-14v-1l-2%207-1%204v2c2%201%201%202-1%203-4%201-4%205%200%207a261%20261%200%200116%205c2%200%204%202%207%205%205%204%205%204%204%207-4%206-19%2016-20%2012%200-2-4-3-6-2-1%200-1%201%202%201%202%200%203%201%203%203s1%202%202%201h9c-3%200-3%200%203-2l8-3%202%201v1l1%204%205%2012-2-7-2-8-1-3c-1%200-1-1%201-1%201-2%202-2%202%204%201%206%206%2017%208%2018%201%200%203-7%203-15l1-11v-3l4%202c6%203%2020%208%2021%207l-1-2v-5h-1c0%201-2%200-5-4l-5-6h6c10-1%2018-3%2018-4l-9-3c-7-1-10-3-7-3%202%200%208-5%2011-8l3-4c1%201-3%207-7%2010l-2%203c2%200%208-6%2010-10l3-6c3-2%202-7-2-7-3%200-5%203-5%205%201%202-3%206-10%209l-15%206c-4-5-6-11-5-11%203-2%202-17%200-19s-6-1-6%201-2%201-4-4l-5-8c-3-4-3-9%200-9l1%201%201%201h1v1h1c-1%201%207%207%2012%209l4%203c1%205%209%205%209-1%200-2-3-4-6-3l-4-7c-6-12-11-16-21-16-8%200-11%202-13%208%200%202-1%203-2%203l-4-2h-2l2-1c2-1%202-1%201-3l-2-1v3c-4%200-3%203%201%203%205%202%208%207%203%208l-5%202c-5%201-7%200-13-8-5-7-2-14%205-14%203%200%205%202%203%202v1c1%200%202%201%202%203l1%203v-2c0-3%202-4%204-3l2-1-3-1-2-1c0-3-9-4-13-1m25%209v10l5%201c2%200%203%200%203-3l1-5v-3c-1%201-3%200-5-1l-3-2-1%203m126-1v3l-2%203c0%203-5%203-6%200-2-4-5-8-5-6s-1%202-2%202h-3l3%201c3%200%204%201%206%204l1%204c-1%200-6-3-6-5l-1-1c-1%200-2%203-1%204l2%205%204%207c4%203%204%203%207%202%204-3%2010-14%208-17h-1l-3%204c-4%202-6%203-4%200l3-4c0-2%201-2%204-2h3l1%201v-4l-2%201h-3l-2-3c-1-1-1-1-1%201m105%2025h-3c-3%200-3%200-4%202-1%203-5%204-6%201v-1l-8%201h-10c-2%200-2%200-2%2010%200%2012%200%2012%206%209%203-2%204-2%204-1l1%202-1%202c-3%206%205%2012%209%206l2-1%201-2-1-2%202%202%202%202v-3l-1-3-1-2c0-3-2-2-2%200h-2c-3-3-2-4%202-5l3-1v1l3-1%201-1%202-2c2%200%202-3-10%2038l-4%2014c-1%205-2%205-10%203-4-2-6-2-5-1%201%202%2014%204%2015%203a442%20442%200%200019-63l3-8h-3l-2%201m24%2016a2649%202649%200%2001-15%2061c3-4%208-5%2012-2%205%203%207%204%205%201v-39l-3-1c-2%200-2%200-1-1%202%200%203-4%201-4-1-1-1-1%201-1%202%201%202%201%202-9v-10l-2%205m-363-1l2%204h-1c-4-3-11%200-11%205%200%204%209%2017%2012%2017l7-7c8-8%209-13%205-16h-6c-1%202-3%201-3%200l2-3c0-2-1-2-4-2s-3%200-3%202m119%202l1%201%201%205c1%205-1%208-4%205l-4-2-4-3c-1-1-1-1-1%201%201%203%201%203-1%204l-1%201%204-1h4l5%202%203%202h-5l-6-1c-1-1-1-1-1%201l1%202%204%203%207%204%208%201%201-2c2-2%200-18-3-19v1l-2%205-1%204-1-3-1-5v-3c2%200%202-1%200-2-3-2-4-2-4-1m-94%2011c-3%200-4%202-2%202v7c0%208%201%2011%205%2011%203%200%205-2%205-5l1-5c1-3-3-11-5-11l-4%201m285%209h-2l-1%2012%201%2012%2011-6%203-2-5-8c-4-9-5-10-7-8m24%209l-4%202%202%203c3%206%203%206%2011%201%201%200-2-8-4-8%200-1-3%200-5%202m-48%204l1%201%202%201-1%203c-2%201-3%201-3-1l-1-1v3c1%203%201%203%203%202%201-1%202-1%203%201%204%203%201%204-3%201h-1c0%201%203%203%207%203%203%200%206-2%206-3l-2%201c-3%201-3%201-3-1s0-2%203-2c2%201%203%200%203-1l-1-1c-2%201-3-2-2-4s0-3-2-1h-4c-3-2-5-2-5-1m-243%203l-3%204H62l-14%201h-2c-1%202-3%203-2%201l-1-2-1%202c-1%202-1%202-1%200%200-1-1-2-13-1-17%200-27%203-27%207%200%202%200%202%203%202a344%20344%200%200114-4l22-4c1%202-1%202-20%207l-17%205c3%200%202%201%200%204s-3%205-1%205l1-1h3l31%201h30l6-3%206-3v3c0%203%203%204%204%202h2l2%201%201-1h2l5%201h5l-8-12a319%20319%200%2000-11-17s-2%200-3%202m284%205l1%202-1%206c-3%208-2%2012%203%2012%203%200%205-1%206-6l1-3c2-1%201-8%200-9l-4-2-4-1-2%201'%20fill='%233f51b5'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.123076923076923,"src":"/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/dee3b/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg","srcSet":"/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/f81b6/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 138w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/cf463/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 275w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/dee3b/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 550w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/c1303/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 825w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/42364/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 1100w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/c033a/joker-card-toni-reed-VupdxmowTDg-unsplash.jpg 4288w","srcWebp":"/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/25338/joker-card-toni-reed-VupdxmowTDg-unsplash.webp","srcSetWebp":"/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/c6300/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 138w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/88818/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 275w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/25338/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 550w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/6d9da/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 825w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/5c86c/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 1100w,\n/static/62d1fc5f87910dbe41bbb9f0f6fbfa17/99bdc/joker-card-toni-reed-VupdxmowTDg-unsplash.webp 4288w","sizes":"(max-width: 550px) 100vw, 550px"}}},"heroAlt":"Joker cards sitting on a bed of cards"},"fields":{"slug":"/quick-trick-jest-asynchronous-tests/"},"excerpt":"Two weeks ago I wrote a post on Asynchronous testing with Enzyme & React in Jest. It covered the challenge of testing an async React…"}}]},"site":{"siteMetadata":{"author":{"name":"Ben Ilegbodu"}}}},"pageContext":{"slug":"/asynchronous-testing-with-enzyme-react-jest/","previousSlug":"/avoiding-react-act-warning-when-accessibility-testing-next-link-jest-axe/","nextSlug":"/9-single-statement-javascript-algorithms-common-data-transformations/","category":"Testing"}},"staticQueryHashes":["2495720375","307212292","4260024542","520305385","58428228"]}